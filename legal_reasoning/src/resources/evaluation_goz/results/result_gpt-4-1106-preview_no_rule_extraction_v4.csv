,tests_rule,invoice,result,interpreter_result,code,is_correct,explanation,prediction
0,40,"{'_Positionen': [{'_Faktor': 2.3, '_Behandlungsdatum': '2012-02-12', '_Anzahl': 1, '_Betrag': 12.94, '_Leistungsbeschreibung': 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '_Nr': '0010', '_Typ': 'Service'}, {'_Faktor': 2.3, '_Behandlungsdatum': '2012-02-12', '_Anzahl': 1, '_Betrag': 25.87, '_Leistungsbeschreibung': 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '_Nr': '0030', '_Typ': 'Service'}], '_Kassenanteil': {'_KassenanteilSumme': None}, '_Rechnungsnummer': '97997', '_Rechnungsdatum': '2012-07-03', '_Rechnungsbetrag': 38.81, '_Waehrung': 'EUR'}",False,"ERROR: -g example_invoice(X), is_invoice_invalid(X).: false
","
% Helper predicate to check if both services 0030 and 0040 are in the same invoice
both_services_present(Services) :-
    member(service(0030, _, _, _, _, _, _, _), Services),
    member(service(0040, _, _, _, _, _, _, _), Services).

% Main predicate to determine if the invoice is invalid based on the rule
is_invoice_invalid(Invoice) :-
    Invoice = invoice(Services, _, _, _),
    both_services_present(Services),
    print('Services 0030 and 0040 are not billable together.'),
    true.

example_invoice(invoice([
		service(0010, date(2012, 2, 12), 2.3, 100.0, 12.94, 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '', []),
		service(0030, date(2012, 2, 12), 2.3, 200.0, 25.87, 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '', [])
	],
	[
		
	],
	invoice_date(date(2012, 7, 3)),
	invoice_amount(38.81)
)).",True,Services with numbers 0030 and 0040 cannot be billed together.,True
1,40,"{'_Positionen': [{'_Faktor': 2.3, '_Behandlungsdatum': '2012-02-12', '_Anzahl': 1, '_Betrag': 25.87, '_Leistungsbeschreibung': 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '_Nr': '0030', '_Typ': 'Service'}, {'_Faktor': 2.3, '_Behandlungsdatum': '2012-02-12', '_Anzahl': 1, '_Betrag': 32.34, '_Leistungsbeschreibung': 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '_Nr': '0040', '_Typ': 'Service'}], '_Kassenanteil': {'_KassenanteilSumme': None}, '_Rechnungsnummer': '97997', '_Rechnungsdatum': '2012-07-03', '_Rechnungsbetrag': 58.21, '_Waehrung': 'EUR'}",'Services 0030 and 0040 are not billable together.','Services 0030 and 0040 are not billable together.',"
% Helper predicate to check if both services 0030 and 0040 are in the same invoice
both_services_present(Services) :-
    member(service(0030, _, _, _, _, _, _, _), Services),
    member(service(0040, _, _, _, _, _, _, _), Services).

% Main predicate to determine if the invoice is invalid based on the rule
is_invoice_invalid(Invoice) :-
    Invoice = invoice(Services, _, _, _),
    both_services_present(Services),
    print('Services 0030 and 0040 are not billable together.'),
    true.

example_invoice(invoice([
		service(0030, date(2012, 2, 12), 2.3, 200.0, 25.87, 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '', []),
		service(0040, date(2012, 2, 12), 2.3, 250.0, 32.34, 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '', [])
	],
	[
		
	],
	invoice_date(date(2012, 7, 3)),
	invoice_amount(58.21)
)).",False,Services with numbers 0030 and 0040 cannot be billed together.,False
2,60,"{'_Positionen': [{'_Faktor': 2.3, '_Behandlungsdatum': '2012-02-12', '_Anzahl': 1, '_Betrag': 15.52, '_Leistungsbeschreibung': 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '_Nr': '0050', '_Typ': 'Service', '_Begründung': 'Irgend eine Begründung'}, {'_Faktor': 2.3, '_Behandlungsdatum': '2012-02-12', '_Anzahl': 1, '_Betrag': 33.63, '_Leistungsbeschreibung': 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '_Nr': '0060', '_Typ': 'Service', '_Begründung': 'Irgend eine Begründung'}], '_Kassenanteil': {'_KassenanteilSumme': None}, '_Rechnungsnummer': '97997', '_Rechnungsdatum': '2012-07-03', '_Rechnungsbetrag': 49.15, '_Waehrung': 'EUR'}",False,"ERROR: -g example_invoice(X), is_invoice_invalid(X).: false
","
is_invoice_invalid(Invoice) :-
    Invoice = invoice(Services, _, _, _),
    member(service(0050, _, _, _, _, _, Justification1, _), Services),
    member(service(0060, _, _, _, _, _, Justification2, _), Services),
    (Justification1 == '' ; Justification2 == ''),
    print('Both services 0050 and 0060 are billed without proper justification.'),
    true.

example_invoice(invoice([
		service(0050, date(2012, 2, 12), 2.3, 120.0, 15.52, 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', 'Irgend eine Begründung', []),
		service(0060, date(2012, 2, 12), 2.3, 260.0, 33.63, 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', 'Irgend eine Begründung', [])
	],
	[
		
	],
	invoice_date(date(2012, 7, 3)),
	invoice_amount(49.15)
)).",True,"For services with ""ServiceNumber"" 0050 and 0060, a ""Justification"" must be provided in the invoice.",True
3,60,"{'_Positionen': [{'_Faktor': 2.3, '_Behandlungsdatum': '2012-02-12', '_Anzahl': 1, '_Betrag': 15.52, '_Leistungsbeschreibung': 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '_Nr': '0050', '_Typ': 'Service'}, {'_Faktor': 2.3, '_Behandlungsdatum': '2012-02-12', '_Anzahl': 1, '_Betrag': 33.63, '_Leistungsbeschreibung': 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '_Nr': '0060', '_Typ': 'Service'}], '_Kassenanteil': {'_KassenanteilSumme': None}, '_Rechnungsnummer': '97997', '_Rechnungsdatum': '2012-07-03', '_Rechnungsbetrag': 49.15, '_Waehrung': 'EUR'}",'Both services 0050 and 0060 are billed without proper justification.','Both services 0050 and 0060 are billed without proper justification.',"
is_invoice_invalid(Invoice) :-
    Invoice = invoice(Services, _, _, _),
    member(service(0050, _, _, _, _, _, Justification1, _), Services),
    member(service(0060, _, _, _, _, _, Justification2, _), Services),
    (Justification1 == '' ; Justification2 == ''),
    print('Both services 0050 and 0060 are billed without proper justification.'),
    true.

example_invoice(invoice([
		service(0050, date(2012, 2, 12), 2.3, 120.0, 15.52, 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '', []),
		service(0060, date(2012, 2, 12), 2.3, 260.0, 33.63, 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '', [])
	],
	[
		
	],
	invoice_date(date(2012, 7, 3)),
	invoice_amount(49.15)
)).",False,"For services with ""ServiceNumber"" 0050 and 0060, a ""Justification"" must be provided in the invoice.",False
4,65,"{'_Positionen': [{'_Faktor': 2.3, '_Behandlungsdatum': '2012-02-12', '_Anzahl': 1, '_Betrag': 10.35, '_Leistungsbeschreibung': 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '_Nr': '0065', '_Typ': 'Service', '_Zahn': [31, 32, 33, 34, 35, 36, 37]}, {'_Faktor': 2.3, '_Behandlungsdatum': '2012-02-12', '_Anzahl': 1, '_Betrag': 32.34, '_Leistungsbeschreibung': 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '_Nr': '5170', '_Typ': 'Service', '_Zahn': [11, 12, 13, 14, 15, 16, 17]}], '_Kassenanteil': {'_KassenanteilSumme': None}, '_Rechnungsnummer': '97997', '_Rechnungsdatum': '2012-07-03', '_Rechnungsbetrag': 42.69, '_Waehrung': 'EUR'}",False,"ERROR: -g example_invoice(X), is_invoice_invalid(X).: false
","
is_invoice_invalid(Invoice) :-
    Invoice = invoice(Services, _, _, _),
    member(service(0065, _, _, _, _, _, _, [tooth(Area, _)]), Services),
    member(service(OtherService, _, _, _, _, _, _, [tooth(Area, _)]), Services),
    0065 \= OtherService,
    print('Optisch-elektronische Abformung (0065) billed with other services for the same area, which is not allowed.'),
    true.

example_invoice(invoice([
		service(0065, date(2012, 2, 12), 2.3, 80.0, 10.35, 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '', [tooth(3, 1), tooth(3, 2), tooth(3, 3), tooth(3, 4), tooth(3, 5), tooth(3, 6), tooth(3, 7)]),
		service(5170, date(2012, 2, 12), 2.3, 250.0, 32.34, 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '', [tooth(1, 1), tooth(1, 2), tooth(1, 3), tooth(1, 4), tooth(1, 5), tooth(1, 6), tooth(1, 7)])
	],
	[
		
	],
	invoice_date(date(2012, 7, 3)),
	invoice_amount(42.69)
)).",True,"If the service under number 0065 is included in the invoice, conventional impressions (e.g. 5170) for the same half of the jaw or the same front tooth area cannot be billed.",True
5,65,"{'_Positionen': [{'_Faktor': 2.3, '_Behandlungsdatum': '2012-02-12', '_Anzahl': 1, '_Betrag': 10.35, '_Leistungsbeschreibung': 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '_Nr': '0065', '_Typ': 'Service', '_Zahn': [11, 12, 13, 14, 15, 16, 17]}, {'_Faktor': 2.3, '_Behandlungsdatum': '2012-02-12', '_Anzahl': 1, '_Betrag': 32.34, '_Leistungsbeschreibung': 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '_Nr': '5170', '_Typ': 'Service', '_Zahn': [11, 12, 13, 14, 15, 16, 17]}], '_Kassenanteil': {'_KassenanteilSumme': None}, '_Rechnungsnummer': '97997', '_Rechnungsdatum': '2012-07-03', '_Rechnungsbetrag': 42.69, '_Waehrung': 'EUR'}",False,"ERROR: -g example_invoice(X), is_invoice_invalid(X).: false
","
is_invoice_invalid(Invoice) :-
    Invoice = invoice(Services, _, _, _),
    member(service(0065, _, _, _, _, _, _, [tooth(Area, _)]), Services),
    member(service(OtherService, _, _, _, _, _, _, [tooth(Area, _)]), Services),
    0065 \= OtherService,
    print('Optisch-elektronische Abformung (0065) billed with other services for the same area, which is not allowed.'),
    true.

example_invoice(invoice([
		service(0065, date(2012, 2, 12), 2.3, 80.0, 10.35, 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '', [tooth(1, 1), tooth(1, 2), tooth(1, 3), tooth(1, 4), tooth(1, 5), tooth(1, 6), tooth(1, 7)]),
		service(5170, date(2012, 2, 12), 2.3, 250.0, 32.34, 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '', [tooth(1, 1), tooth(1, 2), tooth(1, 3), tooth(1, 4), tooth(1, 5), tooth(1, 6), tooth(1, 7)])
	],
	[
		
	],
	invoice_date(date(2012, 7, 3)),
	invoice_amount(42.69)
)).",False,"If the service under number 0065 is included in the invoice, conventional impressions (e.g. 5170) for the same half of the jaw or the same front tooth area cannot be billed.",True
6,100,"{'_Positionen': [{'_Faktor': 2.3, '_Behandlungsdatum': '2012-02-12', '_Anzahl': 2, '_Betrag': 18.1, '_Leistungsbeschreibung': 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '_Nr': '0090', '_Typ': 'Service', '_Zahn': [31, 32], '_Begründung': 'Eine Begründung'}, {'_Faktor': 2.3, '_Behandlungsdatum': '2012-03-12', '_Anzahl': 2, '_Betrag': 18.1, '_Leistungsbeschreibung': 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '_Nr': '0090', '_Typ': 'Service', '_Zahn': [33, 34], '_Begründung': 'Eine Begründung'}], '_Kassenanteil': {'_KassenanteilSumme': None}, '_Rechnungsnummer': '97997', '_Rechnungsdatum': '2012-07-03', '_Rechnungsbetrag': 36.2, '_Waehrung': 'EUR'}",False,"ERROR: -g example_invoice(X), is_invoice_invalid(X).: false
","
is_invoice_invalid(Invoice) :-
    Invoice = invoice(Services, _, _, _),
    findall(
        tooth(Area, Position),
        (
            member(service(0090, _, _, _, _, _, Justification, Teeth), Services),
            member(tooth(Area, Position), Teeth),
            Justification == ''
        ),
        UnjustifiedTeeth),
    list_duplicates(UnjustifiedTeeth, Duplicates),
    Duplicates \= [],
    print('Service 0090 billed more than once for a tooth without justification: '),
    print(Duplicates),
    true.

list_duplicates(List, Duplicates) :-
    sort(List, Sorted),
    find_duplicates(Sorted, Duplicates).

find_duplicates([X, X | T], [X | D]) :-
    !, find_duplicates([X | T], D).
find_duplicates([X, Y | T], D) :-
    X \= Y,
    find_duplicates([Y | T], D).
find_duplicates([_], []).
find_duplicates([], []).



example_invoice(invoice([
		service(0090, date(2012, 2, 12), 2.3, 60.0, 18.1, 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', 'Eine Begründung', [tooth(3, 1)]),
		service(0090, date(2012, 2, 12), 2.3, 60.0, 18.1, 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', 'Eine Begründung', [tooth(3, 2)]),
		service(0090, date(2012, 3, 12), 2.3, 60.0, 18.1, 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', 'Eine Begründung', [tooth(3, 3)]),
		service(0090, date(2012, 3, 12), 2.3, 60.0, 18.1, 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', 'Eine Begründung', [tooth(3, 4)])
	],
	[
		
	],
	invoice_date(date(2012, 7, 3)),
	invoice_amount(36.2)
)).",True,"If the service is billed more than once per tooth under code 0090, this must be justified in the invoice.",True
7,100,"{'_Positionen': [{'_Faktor': 2.3, '_Behandlungsdatum': '2012-02-12', '_Anzahl': 2, '_Betrag': 18.1, '_Leistungsbeschreibung': 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '_Nr': '0090', '_Typ': 'Service', '_Zahn': [31, 31]}], '_Kassenanteil': {'_KassenanteilSumme': None}, '_Rechnungsnummer': '97997', '_Rechnungsdatum': '2012-07-03', '_Rechnungsbetrag': 18.1, '_Waehrung': 'EUR'}",False,"ERROR: -g example_invoice(X), is_invoice_invalid(X).: false
","
is_invoice_invalid(Invoice) :-
    Invoice = invoice(Services, _, _, _),
    findall(
        tooth(Area, Position),
        (
            member(service(0090, _, _, _, _, _, Justification, Teeth), Services),
            member(tooth(Area, Position), Teeth),
            Justification == ''
        ),
        UnjustifiedTeeth),
    list_duplicates(UnjustifiedTeeth, Duplicates),
    Duplicates \= [],
    print('Service 0090 billed more than once for a tooth without justification: '),
    print(Duplicates),
    true.

list_duplicates(List, Duplicates) :-
    sort(List, Sorted),
    find_duplicates(Sorted, Duplicates).

find_duplicates([X, X | T], [X | D]) :-
    !, find_duplicates([X | T], D).
find_duplicates([X, Y | T], D) :-
    X \= Y,
    find_duplicates([Y | T], D).
find_duplicates([_], []).
find_duplicates([], []).



example_invoice(invoice([
		service(0090, date(2012, 2, 12), 2.3, 60.0, 18.1, 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '', [tooth(3, 1)]),
		service(0090, date(2012, 2, 12), 2.3, 60.0, 18.1, 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '', [tooth(3, 1)])
	],
	[
		
	],
	invoice_date(date(2012, 7, 3)),
	invoice_amount(18.1)
)).",False,"If the service is billed more than once per tooth under code 0090, this must be justified in the invoice.",True
8,100,"{'_Positionen': [{'_Faktor': 2.3, '_Behandlungsdatum': '2012-02-12', '_Anzahl': 1, '_Betrag': 9.05, '_Leistungsbeschreibung': 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '_Nr': '0090', '_Typ': 'Service', '_Zahn': [31]}, {'_Faktor': 2.3, '_Behandlungsdatum': '2012-03-12', '_Anzahl': 1, '_Betrag': 9.05, '_Leistungsbeschreibung': 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '_Nr': '0090', '_Typ': 'Service', '_Zahn': [31]}], '_Kassenanteil': {'_KassenanteilSumme': None}, '_Rechnungsnummer': '97997', '_Rechnungsdatum': '2012-07-03', '_Rechnungsbetrag': 18.1, '_Waehrung': 'EUR'}",False,"ERROR: -g example_invoice(X), is_invoice_invalid(X).: false
","
is_invoice_invalid(Invoice) :-
    Invoice = invoice(Services, _, _, _),
    findall(
        tooth(Area, Position),
        (
            member(service(0090, _, _, _, _, _, Justification, Teeth), Services),
            member(tooth(Area, Position), Teeth),
            Justification == ''
        ),
        UnjustifiedTeeth),
    list_duplicates(UnjustifiedTeeth, Duplicates),
    Duplicates \= [],
    print('Service 0090 billed more than once for a tooth without justification: '),
    print(Duplicates),
    true.

list_duplicates(List, Duplicates) :-
    sort(List, Sorted),
    find_duplicates(Sorted, Duplicates).

find_duplicates([X, X | T], [X | D]) :-
    !, find_duplicates([X | T], D).
find_duplicates([X, Y | T], D) :-
    X \= Y,
    find_duplicates([Y | T], D).
find_duplicates([_], []).
find_duplicates([], []).



example_invoice(invoice([
		service(0090, date(2012, 2, 12), 2.3, 60.0, 9.05, 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '', [tooth(3, 1)]),
		service(0090, date(2012, 3, 12), 2.3, 60.0, 9.05, 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '', [tooth(3, 1)])
	],
	[
		
	],
	invoice_date(date(2012, 7, 3)),
	invoice_amount(18.1)
)).",False,"If the service is billed more than once per tooth under code 0090, this must be justified in the invoice.",True
9,110,"{'_Positionen': [{'_Faktor': 1.0, '_Behandlungsdatum': '2012-02-12', '_Anzahl': 1, '_Betrag': 22.5, '_Leistungsbeschreibung': 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '_Nr': '0110', '_Typ': 'Service'}, {'_Faktor': 1.0, '_Behandlungsdatum': '2012-03-12', '_Anzahl': 1, '_Betrag': 22.5, '_Leistungsbeschreibung': 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '_Nr': '0110', '_Typ': 'Service'}], '_Kassenanteil': {'_KassenanteilSumme': None}, '_Rechnungsnummer': '97997', '_Rechnungsdatum': '2012-07-03', '_Rechnungsbetrag': 45.0, '_Waehrung': 'EUR'}",'Zuschlag 0110 is billed without a compatible service on the same treatment day',"Warning: c:/users/jonas/ideaprojects/idp/legal rule extraction goz/goz/src/temp.pl:2:
Warning:    Singleton variables: [Multiplier]
'Zuschlag 0110 is billed without a compatible service on the same treatment day'","
is_invoice_invalid(Invoice) :-
    Invoice = invoice(Services, _, _, _),
    findall(date(Y, M, D), member(service(0110, date(Y, M, D), Multiplier, _, _, _, _, _), Services), DatesWith0110),
    find_duplicates(DatesWith0110, Duplicates),
    Duplicates \= [],
    print('Zuschlag 0110 is billed more than once on the same treatment day'), !, true.

is_invoice_invalid(Invoice) :-
    Invoice = invoice(Services, _, _, _),
    member(service(0110, _, Multiplier, _, _, _, _, _), Services),
    Multiplier \= 1.0,
    print('Zuschlag 0110 is billed with a multiplier different from 1.0'), !, true.

is_invoice_invalid(Invoice) :-
    Invoice = invoice(Services, _, _, _),
    member(service(0110, Date, _, _, _, _, _, _), Services),
    \+ (member(service(ServiceNumber, Date, _, _, _, _, _, _), Services), microscope_compatible(ServiceNumber)),
    print('Zuschlag 0110 is billed without a compatible service on the same treatment day'), !, true.

microscope_compatible(ServiceNumber) :-
    member(ServiceNumber, [2195, 2330, 2340, 2360, 2410, 2440, 3020, 3030, 3040, 3045, 3060, 3110, 3120, 3190, 3200, 4090, 4100, 4130, 4133, 9100, 9110, 9120, 9130, 9170]).

find_duplicates(List, Duplicates) :-
    sort(List, Sorted),
    find_duplicates_helper(Sorted, Duplicates).

find_duplicates_helper([X, X | T], [X | D]) :-
    !, find_duplicates_helper([X | T], D).
find_duplicates_helper([_ | T], D) :-
    find_duplicates_helper(T, D).
find_duplicates_helper([], []).

example_invoice(invoice([
		service(0110, date(2012, 2, 12), 1.0, 400.0, 22.5, 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '', []),
		service(0110, date(2012, 3, 12), 1.0, 400.0, 22.5, 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '', [])
	],
	[
		
	],
	invoice_date(date(2012, 7, 3)),
	invoice_amount(45.0)
)).",True,The surcharge according to ServiceNumber 0110 can only be charged once per treatment day and only at the regular fee rate.,False
10,110,"{'_Positionen': [{'_Faktor': 2, '_Behandlungsdatum': '2012-02-12', '_Anzahl': 1, '_Betrag': 45.0, '_Leistungsbeschreibung': 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '_Nr': '0110', '_Typ': 'Service'}], '_Kassenanteil': {'_KassenanteilSumme': None}, '_Rechnungsnummer': '97997', '_Rechnungsdatum': '2012-07-03', '_Rechnungsbetrag': 45.0, '_Waehrung': 'EUR'}",'Zuschlag 0110 is billed with a multiplier different from 1.0',"Warning: c:/users/jonas/ideaprojects/idp/legal rule extraction goz/goz/src/temp.pl:2:
Warning:    Singleton variables: [Multiplier]
'Zuschlag 0110 is billed with a multiplier different from 1.0'","
is_invoice_invalid(Invoice) :-
    Invoice = invoice(Services, _, _, _),
    findall(date(Y, M, D), member(service(0110, date(Y, M, D), Multiplier, _, _, _, _, _), Services), DatesWith0110),
    find_duplicates(DatesWith0110, Duplicates),
    Duplicates \= [],
    print('Zuschlag 0110 is billed more than once on the same treatment day'), !, true.

is_invoice_invalid(Invoice) :-
    Invoice = invoice(Services, _, _, _),
    member(service(0110, _, Multiplier, _, _, _, _, _), Services),
    Multiplier \= 1.0,
    print('Zuschlag 0110 is billed with a multiplier different from 1.0'), !, true.

is_invoice_invalid(Invoice) :-
    Invoice = invoice(Services, _, _, _),
    member(service(0110, Date, _, _, _, _, _, _), Services),
    \+ (member(service(ServiceNumber, Date, _, _, _, _, _, _), Services), microscope_compatible(ServiceNumber)),
    print('Zuschlag 0110 is billed without a compatible service on the same treatment day'), !, true.

microscope_compatible(ServiceNumber) :-
    member(ServiceNumber, [2195, 2330, 2340, 2360, 2410, 2440, 3020, 3030, 3040, 3045, 3060, 3110, 3120, 3190, 3200, 4090, 4100, 4130, 4133, 9100, 9110, 9120, 9130, 9170]).

find_duplicates(List, Duplicates) :-
    sort(List, Sorted),
    find_duplicates_helper(Sorted, Duplicates).

find_duplicates_helper([X, X | T], [X | D]) :-
    !, find_duplicates_helper([X | T], D).
find_duplicates_helper([_ | T], D) :-
    find_duplicates_helper(T, D).
find_duplicates_helper([], []).

example_invoice(invoice([
		service(0110, date(2012, 2, 12), 2, 400.0, 45.0, 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '', [])
	],
	[
		
	],
	invoice_date(date(2012, 7, 3)),
	invoice_amount(45.0)
)).",False,The surcharge according to ServiceNumber 0110 can only be charged once per treatment day and only at the regular fee rate.,False
11,110,"{'_Positionen': [{'_Faktor': 1.0, '_Behandlungsdatum': '2012-02-12', '_Anzahl': 1, '_Betrag': 22.5, '_Leistungsbeschreibung': 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '_Nr': '0110', '_Typ': 'Service'}, {'_Faktor': 1.0, '_Behandlungsdatum': '2012-02-12', '_Anzahl': 1, '_Betrag': 22.5, '_Leistungsbeschreibung': 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '_Nr': '0110', '_Typ': 'Service'}], '_Kassenanteil': {'_KassenanteilSumme': None}, '_Rechnungsnummer': '97997', '_Rechnungsdatum': '2012-07-03', '_Rechnungsbetrag': 45.0, '_Waehrung': 'EUR'}",'Zuschlag 0110 is billed without a compatible service on the same treatment day',"Warning: c:/users/jonas/ideaprojects/idp/legal rule extraction goz/goz/src/temp.pl:2:
Warning:    Singleton variables: [Multiplier]
'Zuschlag 0110 is billed without a compatible service on the same treatment day'","
is_invoice_invalid(Invoice) :-
    Invoice = invoice(Services, _, _, _),
    findall(date(Y, M, D), member(service(0110, date(Y, M, D), Multiplier, _, _, _, _, _), Services), DatesWith0110),
    find_duplicates(DatesWith0110, Duplicates),
    Duplicates \= [],
    print('Zuschlag 0110 is billed more than once on the same treatment day'), !, true.

is_invoice_invalid(Invoice) :-
    Invoice = invoice(Services, _, _, _),
    member(service(0110, _, Multiplier, _, _, _, _, _), Services),
    Multiplier \= 1.0,
    print('Zuschlag 0110 is billed with a multiplier different from 1.0'), !, true.

is_invoice_invalid(Invoice) :-
    Invoice = invoice(Services, _, _, _),
    member(service(0110, Date, _, _, _, _, _, _), Services),
    \+ (member(service(ServiceNumber, Date, _, _, _, _, _, _), Services), microscope_compatible(ServiceNumber)),
    print('Zuschlag 0110 is billed without a compatible service on the same treatment day'), !, true.

microscope_compatible(ServiceNumber) :-
    member(ServiceNumber, [2195, 2330, 2340, 2360, 2410, 2440, 3020, 3030, 3040, 3045, 3060, 3110, 3120, 3190, 3200, 4090, 4100, 4130, 4133, 9100, 9110, 9120, 9130, 9170]).

find_duplicates(List, Duplicates) :-
    sort(List, Sorted),
    find_duplicates_helper(Sorted, Duplicates).

find_duplicates_helper([X, X | T], [X | D]) :-
    !, find_duplicates_helper([X | T], D).
find_duplicates_helper([_ | T], D) :-
    find_duplicates_helper(T, D).
find_duplicates_helper([], []).

example_invoice(invoice([
		service(0110, date(2012, 2, 12), 1.0, 400.0, 22.5, 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '', []),
		service(0110, date(2012, 2, 12), 1.0, 400.0, 22.5, 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '', [])
	],
	[
		
	],
	invoice_date(date(2012, 7, 3)),
	invoice_amount(45.0)
)).",False,The surcharge according to ServiceNumber 0110 can only be charged once per treatment day and only at the regular fee rate.,False
12,120,"{'_Positionen': [{'_Faktor': 2.3, '_Behandlungsdatum': '2012-02-12', '_Anzahl': 1, '_Betrag': 50.71, '_Leistungsbeschreibung': 'Aufbereitung eines Wurzelkanals', '_Nr': '2410', '_Typ': 'Service'}, {'_Faktor': 1.0, '_Behandlungsdatum': '2012-02-12', '_Anzahl': 1, '_Betrag': 50.71, '_Leistungsbeschreibung': 'Zuschlag für die Anwendung eines Lasers bei Leistung nach Nummer 2410', '_Nr': '0120', '_Typ': 'Service'}, {'_Faktor': 2.3, '_Behandlungsdatum': '2012-03-12', '_Anzahl': 1, '_Betrag': 50.71, '_Leistungsbeschreibung': 'Aufbereitung eines Wurzelkanals', '_Nr': '2410', '_Typ': 'Service'}, {'_Faktor': 1.0, '_Behandlungsdatum': '2012-03-12', '_Anzahl': 1, '_Betrag': 50.71, '_Leistungsbeschreibung': 'Zuschlag für die Anwendung eines Lasers bei Leistung nach Nummer 2410', '_Nr': '0120', '_Typ': 'Service'}], '_Kassenanteil': {'_KassenanteilSumme': None}, '_Rechnungsnummer': '97997', '_Rechnungsdatum': '2012-07-03', '_Rechnungsbetrag': 202.84, '_Waehrung': 'EUR'}",False,"Warning: c:/users/jonas/ideaprojects/idp/legal rule extraction goz/goz/src/temp.pl:2:
Warning:    Singleton variables: [Charge]
Warning: c:/users/jonas/ideaprojects/idp/legal rule extraction goz/goz/src/temp.pl:37:
Warning:    Singleton variables: [Charge]
Warning: c:/users/jonas/ideaprojects/idp/legal rule extraction goz/goz/src/temp.pl:37:
Warning:    Clauses of is_invoice_invalid/1 are not together in the source-file
Warning:    Earlier definition at c:/users/jonas/ideaprojects/idp/legal rule extraction goz/goz/src/temp.pl:2
Warning:    Current predicate: laser_service/1
Warning:    Use :- discontiguous is_invoice_invalid/1. to suppress this message
Warning: c:/users/jonas/ideaprojects/idp/legal rule extraction goz/goz/src/temp.pl:58:
Warning:    Clauses of laser_service/1 are not together in the source-file
Warning:    Earlier definition at c:/users/jonas/ideaprojects/idp/legal rule extraction goz/goz/src/temp.pl:23
Warning:    Current predicate: is_invoice_invalid/1
Warning:    Use :- discontiguous laser_service/1. to suppress this message
Warning: c:/users/jonas/ideaprojects/idp/legal rule extraction goz/goz/src/temp.pl:72:
Warning:    Singleton variables: [Charge]
Warning: c:/users/jonas/ideaprojects/idp/legal rule extraction goz/goz/src/temp.pl:72:
Warning:    Clauses of is_invoice_invalid/1 are not together in the source-file
Warning:    Earlier definition at c:/users/jonas/ideaprojects/idp/legal rule extraction goz/goz/src/temp.pl:2
Warning:    Current predicate: laser_service/1
Warning:    Use :- discontiguous is_invoice_invalid/1. to suppress this message
Warning: c:/users/jonas/ideaprojects/idp/legal rule extraction goz/goz/src/temp.pl:93:
Warning:    Clauses of laser_service/1 are not together in the source-file
Warning:    Earlier definition at c:/users/jonas/ideaprojects/idp/legal rule extraction goz/goz/src/temp.pl:23
Warning:    Current predicate: is_invoice_invalid/1
Warning:    Use :- discontiguous laser_service/1. to suppress this message
ERROR: -g example_invoice(X), is_invoice_invalid(X).: false
","
is_invoice_invalid(Invoice) :-
    Invoice = invoice(Services, _, _, _),
    findall(date(Year, Month, Day), member(service(0120, date(Year, Month, Day), _, _, Charge, _, _, _), Services), LaserDates),
    list_to_set(LaserDates, UniqueLaserDates),
    length(LaserDates, TotalLaserCount),
    length(UniqueLaserDates, UniqueLaserCount),
    TotalLaserCount > UniqueLaserCount,
    print('Laser surcharge billed more than once on the same day'), 
    true.

is_invoice_invalid(Invoice) :-
    Invoice = invoice(Services, _, _, _),
    member(service(0120, Date, Multiplier, _, Charge, _, _, _), Services),
    member(service(ServiceNumber, Date, _, PointScore, _, _, _, _), Services),
    laser_service(ServiceNumber),
    ExpectedCharge is round(Multiplier * PointScore * 100) / 100,
    ExpectedCharge > 68,
    Charge > 68,
    print('Laser surcharge exceeds the maximum allowed amount of 68 Euros'),
    true.

laser_service(2410).
laser_service(3070).
laser_service(3080).
laser_service(3210).
laser_service(3240).
laser_service(4080).
laser_service(4090).
laser_service(4100).
laser_service(4130).
laser_service(4133).
laser_service(9160).


% The translation for Rule 2 is identical to Rule 1 as the rule is repeated.
is_invoice_invalid(Invoice) :-
    Invoice = invoice(Services, _, _, _),
    findall(date(Year, Month, Day), member(service(0120, date(Year, Month, Day), _, _, Charge, _, _, _), Services), LaserDates),
    list_to_set(LaserDates, UniqueLaserDates),
    length(LaserDates, TotalLaserCount),
    length(UniqueLaserDates, UniqueLaserCount),
    TotalLaserCount > UniqueLaserCount,
    print('Laser surcharge billed more than once on the same day'), 
    true.

is_invoice_invalid(Invoice) :-
    Invoice = invoice(Services, _, _, _),
    member(service(0120, Date, Multiplier, _, Charge, _, _, _), Services),
    member(service(ServiceNumber, Date, _, PointScore, _, _, _, _), Services),
    laser_service(ServiceNumber),
    ExpectedCharge is round(Multiplier * PointScore * 100) / 100,
    ExpectedCharge > 68,
    Charge > 68,
    print('Laser surcharge exceeds the maximum allowed amount of 68 Euros'),
    true.

laser_service(2410).
laser_service(3070).
laser_service(3080).
laser_service(3210).
laser_service(3240).
laser_service(4080).
laser_service(4090).
laser_service(4100).
laser_service(4130).
laser_service(4133).
laser_service(9160).


% The translation for Rule 3 is identical to Rule 1 and Rule 2 as the rule is repeated.
is_invoice_invalid(Invoice) :-
    Invoice = invoice(Services, _, _, _),
    findall(date(Year, Month, Day), member(service(0120, date(Year, Month, Day), _, _, Charge, _, _, _), Services), LaserDates),
    list_to_set(LaserDates, UniqueLaserDates),
    length(LaserDates, TotalLaserCount),
    length(UniqueLaserDates, UniqueLaserCount),
    TotalLaserCount > UniqueLaserCount,
    print('Laser surcharge billed more than once on the same day'), 
    true.

is_invoice_invalid(Invoice) :-
    Invoice = invoice(Services, _, _, _),
    member(service(0120, Date, Multiplier, _, Charge, _, _, _), Services),
    member(service(ServiceNumber, Date, _, PointScore, _, _, _, _), Services),
    laser_service(ServiceNumber),
    ExpectedCharge is round(Multiplier * PointScore * 100) / 100,
    ExpectedCharge > 68,
    Charge > 68,
    print('Laser surcharge exceeds the maximum allowed amount of 68 Euros'),
    true.

laser_service(2410).
laser_service(3070).
laser_service(3080).
laser_service(3210).
laser_service(3240).
laser_service(4080).
laser_service(4090).
laser_service(4100).
laser_service(4130).
laser_service(4133).
laser_service(9160).

example_invoice(invoice([
		service(2410, date(2012, 2, 12), 2.3, 392.0, 50.71, 'Aufbereitung eines Wurzelkanals', '', []),
		service(0120, date(2012, 2, 12), 1.0, nan, 50.71, 'Zuschlag für die Anwendung eines Lasers bei Leistung nach Nummer 2410', '', []),
		service(2410, date(2012, 3, 12), 2.3, 392.0, 50.71, 'Aufbereitung eines Wurzelkanals', '', []),
		service(0120, date(2012, 3, 12), 1.0, nan, 50.71, 'Zuschlag für die Anwendung eines Lasers bei Leistung nach Nummer 2410', '', [])
	],
	[
		
	],
	invoice_date(date(2012, 7, 3)),
	invoice_amount(202.84)
)).",True,"The surcharge according to number 0120 amounts to 100% of the basic fee rate for the respective service, but not more than 68 euros. The surcharge according to number 0120 can only be calculated once per treatment day.",True
13,120,"{'_Positionen': [{'_Faktor': 2.3, '_Behandlungsdatum': '2012-02-12', '_Anzahl': 1, '_Betrag': 50.71, '_Leistungsbeschreibung': 'Aufbereitung eines Wurzelkanals', '_Nr': '2410', '_Typ': 'Service'}, {'_Faktor': 1.0, '_Behandlungsdatum': '2012-02-12', '_Anzahl': 1, '_Betrag': 50.71, '_Leistungsbeschreibung': 'Zuschlag für die Anwendung eines Lasers bei Leistung nach Nummer 2410', '_Nr': '0120', '_Typ': 'Service'}, {'_Faktor': 1.0, '_Behandlungsdatum': '2012-02-12', '_Anzahl': 1, '_Betrag': 50.71, '_Leistungsbeschreibung': 'Zuschlag für die Anwendung eines Lasers bei Leistung nach Nummer 2410', '_Nr': '0120', '_Typ': 'Service'}], '_Kassenanteil': {'_KassenanteilSumme': None}, '_Rechnungsnummer': '97997', '_Rechnungsdatum': '2012-07-03', '_Rechnungsbetrag': 152.13, '_Waehrung': 'EUR'}",'Laser surcharge billed more than once on the same day',"Warning: c:/users/jonas/ideaprojects/idp/legal rule extraction goz/goz/src/temp.pl:2:
Warning:    Singleton variables: [Charge]
Warning: c:/users/jonas/ideaprojects/idp/legal rule extraction goz/goz/src/temp.pl:37:
Warning:    Singleton variables: [Charge]
Warning: c:/users/jonas/ideaprojects/idp/legal rule extraction goz/goz/src/temp.pl:37:
Warning:    Clauses of is_invoice_invalid/1 are not together in the source-file
Warning:    Earlier definition at c:/users/jonas/ideaprojects/idp/legal rule extraction goz/goz/src/temp.pl:2
Warning:    Current predicate: laser_service/1
Warning:    Use :- discontiguous is_invoice_invalid/1. to suppress this message
Warning: c:/users/jonas/ideaprojects/idp/legal rule extraction goz/goz/src/temp.pl:58:
Warning:    Clauses of laser_service/1 are not together in the source-file
Warning:    Earlier definition at c:/users/jonas/ideaprojects/idp/legal rule extraction goz/goz/src/temp.pl:23
Warning:    Current predicate: is_invoice_invalid/1
Warning:    Use :- discontiguous laser_service/1. to suppress this message
Warning: c:/users/jonas/ideaprojects/idp/legal rule extraction goz/goz/src/temp.pl:72:
Warning:    Singleton variables: [Charge]
Warning: c:/users/jonas/ideaprojects/idp/legal rule extraction goz/goz/src/temp.pl:72:
Warning:    Clauses of is_invoice_invalid/1 are not together in the source-file
Warning:    Earlier definition at c:/users/jonas/ideaprojects/idp/legal rule extraction goz/goz/src/temp.pl:2
Warning:    Current predicate: laser_service/1
Warning:    Use :- discontiguous is_invoice_invalid/1. to suppress this message
Warning: c:/users/jonas/ideaprojects/idp/legal rule extraction goz/goz/src/temp.pl:93:
Warning:    Clauses of laser_service/1 are not together in the source-file
Warning:    Earlier definition at c:/users/jonas/ideaprojects/idp/legal rule extraction goz/goz/src/temp.pl:23
Warning:    Current predicate: is_invoice_invalid/1
Warning:    Use :- discontiguous laser_service/1. to suppress this message
'Laser surcharge billed more than once on the same day'","
is_invoice_invalid(Invoice) :-
    Invoice = invoice(Services, _, _, _),
    findall(date(Year, Month, Day), member(service(0120, date(Year, Month, Day), _, _, Charge, _, _, _), Services), LaserDates),
    list_to_set(LaserDates, UniqueLaserDates),
    length(LaserDates, TotalLaserCount),
    length(UniqueLaserDates, UniqueLaserCount),
    TotalLaserCount > UniqueLaserCount,
    print('Laser surcharge billed more than once on the same day'), 
    true.

is_invoice_invalid(Invoice) :-
    Invoice = invoice(Services, _, _, _),
    member(service(0120, Date, Multiplier, _, Charge, _, _, _), Services),
    member(service(ServiceNumber, Date, _, PointScore, _, _, _, _), Services),
    laser_service(ServiceNumber),
    ExpectedCharge is round(Multiplier * PointScore * 100) / 100,
    ExpectedCharge > 68,
    Charge > 68,
    print('Laser surcharge exceeds the maximum allowed amount of 68 Euros'),
    true.

laser_service(2410).
laser_service(3070).
laser_service(3080).
laser_service(3210).
laser_service(3240).
laser_service(4080).
laser_service(4090).
laser_service(4100).
laser_service(4130).
laser_service(4133).
laser_service(9160).


% The translation for Rule 2 is identical to Rule 1 as the rule is repeated.
is_invoice_invalid(Invoice) :-
    Invoice = invoice(Services, _, _, _),
    findall(date(Year, Month, Day), member(service(0120, date(Year, Month, Day), _, _, Charge, _, _, _), Services), LaserDates),
    list_to_set(LaserDates, UniqueLaserDates),
    length(LaserDates, TotalLaserCount),
    length(UniqueLaserDates, UniqueLaserCount),
    TotalLaserCount > UniqueLaserCount,
    print('Laser surcharge billed more than once on the same day'), 
    true.

is_invoice_invalid(Invoice) :-
    Invoice = invoice(Services, _, _, _),
    member(service(0120, Date, Multiplier, _, Charge, _, _, _), Services),
    member(service(ServiceNumber, Date, _, PointScore, _, _, _, _), Services),
    laser_service(ServiceNumber),
    ExpectedCharge is round(Multiplier * PointScore * 100) / 100,
    ExpectedCharge > 68,
    Charge > 68,
    print('Laser surcharge exceeds the maximum allowed amount of 68 Euros'),
    true.

laser_service(2410).
laser_service(3070).
laser_service(3080).
laser_service(3210).
laser_service(3240).
laser_service(4080).
laser_service(4090).
laser_service(4100).
laser_service(4130).
laser_service(4133).
laser_service(9160).


% The translation for Rule 3 is identical to Rule 1 and Rule 2 as the rule is repeated.
is_invoice_invalid(Invoice) :-
    Invoice = invoice(Services, _, _, _),
    findall(date(Year, Month, Day), member(service(0120, date(Year, Month, Day), _, _, Charge, _, _, _), Services), LaserDates),
    list_to_set(LaserDates, UniqueLaserDates),
    length(LaserDates, TotalLaserCount),
    length(UniqueLaserDates, UniqueLaserCount),
    TotalLaserCount > UniqueLaserCount,
    print('Laser surcharge billed more than once on the same day'), 
    true.

is_invoice_invalid(Invoice) :-
    Invoice = invoice(Services, _, _, _),
    member(service(0120, Date, Multiplier, _, Charge, _, _, _), Services),
    member(service(ServiceNumber, Date, _, PointScore, _, _, _, _), Services),
    laser_service(ServiceNumber),
    ExpectedCharge is round(Multiplier * PointScore * 100) / 100,
    ExpectedCharge > 68,
    Charge > 68,
    print('Laser surcharge exceeds the maximum allowed amount of 68 Euros'),
    true.

laser_service(2410).
laser_service(3070).
laser_service(3080).
laser_service(3210).
laser_service(3240).
laser_service(4080).
laser_service(4090).
laser_service(4100).
laser_service(4130).
laser_service(4133).
laser_service(9160).

example_invoice(invoice([
		service(2410, date(2012, 2, 12), 2.3, 392.0, 50.71, 'Aufbereitung eines Wurzelkanals', '', []),
		service(0120, date(2012, 2, 12), 1.0, nan, 50.71, 'Zuschlag für die Anwendung eines Lasers bei Leistung nach Nummer 2410', '', []),
		service(0120, date(2012, 2, 12), 1.0, nan, 50.71, 'Zuschlag für die Anwendung eines Lasers bei Leistung nach Nummer 2410', '', [])
	],
	[
		
	],
	invoice_date(date(2012, 7, 3)),
	invoice_amount(152.13)
)).",False,"The surcharge according to number 0120 amounts to 100% of the basic fee rate for the respective service, but not more than 68 euros. The surcharge according to number 0120 can only be calculated once per treatment day.",False
14,120,"{'_Positionen': [{'_Faktor': 2.3, '_Behandlungsdatum': '2012-02-12', '_Anzahl': 1, '_Betrag': 50.71, '_Leistungsbeschreibung': 'Aufbereitung eines Wurzelkanals', '_Nr': '2410', '_Typ': 'Service'}, {'_Faktor': 1.0, '_Behandlungsdatum': '2012-02-12', '_Anzahl': 1, '_Betrag': 70.0, '_Leistungsbeschreibung': 'Zuschlag für die Anwendung eines Lasers bei Leistung nach Nummer 2410', '_Nr': '0120', '_Typ': 'Service'}], '_Kassenanteil': {'_KassenanteilSumme': None}, '_Rechnungsnummer': '97997', '_Rechnungsdatum': '2012-07-03', '_Rechnungsbetrag': 120.71, '_Waehrung': 'EUR'}",'Laser surcharge exceeds the maximum allowed amount of 68 Euros',"Warning: c:/users/jonas/ideaprojects/idp/legal rule extraction goz/goz/src/temp.pl:2:
Warning:    Singleton variables: [Charge]
Warning: c:/users/jonas/ideaprojects/idp/legal rule extraction goz/goz/src/temp.pl:37:
Warning:    Singleton variables: [Charge]
Warning: c:/users/jonas/ideaprojects/idp/legal rule extraction goz/goz/src/temp.pl:37:
Warning:    Clauses of is_invoice_invalid/1 are not together in the source-file
Warning:    Earlier definition at c:/users/jonas/ideaprojects/idp/legal rule extraction goz/goz/src/temp.pl:2
Warning:    Current predicate: laser_service/1
Warning:    Use :- discontiguous is_invoice_invalid/1. to suppress this message
Warning: c:/users/jonas/ideaprojects/idp/legal rule extraction goz/goz/src/temp.pl:58:
Warning:    Clauses of laser_service/1 are not together in the source-file
Warning:    Earlier definition at c:/users/jonas/ideaprojects/idp/legal rule extraction goz/goz/src/temp.pl:23
Warning:    Current predicate: is_invoice_invalid/1
Warning:    Use :- discontiguous laser_service/1. to suppress this message
Warning: c:/users/jonas/ideaprojects/idp/legal rule extraction goz/goz/src/temp.pl:72:
Warning:    Singleton variables: [Charge]
Warning: c:/users/jonas/ideaprojects/idp/legal rule extraction goz/goz/src/temp.pl:72:
Warning:    Clauses of is_invoice_invalid/1 are not together in the source-file
Warning:    Earlier definition at c:/users/jonas/ideaprojects/idp/legal rule extraction goz/goz/src/temp.pl:2
Warning:    Current predicate: laser_service/1
Warning:    Use :- discontiguous is_invoice_invalid/1. to suppress this message
Warning: c:/users/jonas/ideaprojects/idp/legal rule extraction goz/goz/src/temp.pl:93:
Warning:    Clauses of laser_service/1 are not together in the source-file
Warning:    Earlier definition at c:/users/jonas/ideaprojects/idp/legal rule extraction goz/goz/src/temp.pl:23
Warning:    Current predicate: is_invoice_invalid/1
Warning:    Use :- discontiguous laser_service/1. to suppress this message
'Laser surcharge exceeds the maximum allowed amount of 68 Euros'","
is_invoice_invalid(Invoice) :-
    Invoice = invoice(Services, _, _, _),
    findall(date(Year, Month, Day), member(service(0120, date(Year, Month, Day), _, _, Charge, _, _, _), Services), LaserDates),
    list_to_set(LaserDates, UniqueLaserDates),
    length(LaserDates, TotalLaserCount),
    length(UniqueLaserDates, UniqueLaserCount),
    TotalLaserCount > UniqueLaserCount,
    print('Laser surcharge billed more than once on the same day'), 
    true.

is_invoice_invalid(Invoice) :-
    Invoice = invoice(Services, _, _, _),
    member(service(0120, Date, Multiplier, _, Charge, _, _, _), Services),
    member(service(ServiceNumber, Date, _, PointScore, _, _, _, _), Services),
    laser_service(ServiceNumber),
    ExpectedCharge is round(Multiplier * PointScore * 100) / 100,
    ExpectedCharge > 68,
    Charge > 68,
    print('Laser surcharge exceeds the maximum allowed amount of 68 Euros'),
    true.

laser_service(2410).
laser_service(3070).
laser_service(3080).
laser_service(3210).
laser_service(3240).
laser_service(4080).
laser_service(4090).
laser_service(4100).
laser_service(4130).
laser_service(4133).
laser_service(9160).


% The translation for Rule 2 is identical to Rule 1 as the rule is repeated.
is_invoice_invalid(Invoice) :-
    Invoice = invoice(Services, _, _, _),
    findall(date(Year, Month, Day), member(service(0120, date(Year, Month, Day), _, _, Charge, _, _, _), Services), LaserDates),
    list_to_set(LaserDates, UniqueLaserDates),
    length(LaserDates, TotalLaserCount),
    length(UniqueLaserDates, UniqueLaserCount),
    TotalLaserCount > UniqueLaserCount,
    print('Laser surcharge billed more than once on the same day'), 
    true.

is_invoice_invalid(Invoice) :-
    Invoice = invoice(Services, _, _, _),
    member(service(0120, Date, Multiplier, _, Charge, _, _, _), Services),
    member(service(ServiceNumber, Date, _, PointScore, _, _, _, _), Services),
    laser_service(ServiceNumber),
    ExpectedCharge is round(Multiplier * PointScore * 100) / 100,
    ExpectedCharge > 68,
    Charge > 68,
    print('Laser surcharge exceeds the maximum allowed amount of 68 Euros'),
    true.

laser_service(2410).
laser_service(3070).
laser_service(3080).
laser_service(3210).
laser_service(3240).
laser_service(4080).
laser_service(4090).
laser_service(4100).
laser_service(4130).
laser_service(4133).
laser_service(9160).


% The translation for Rule 3 is identical to Rule 1 and Rule 2 as the rule is repeated.
is_invoice_invalid(Invoice) :-
    Invoice = invoice(Services, _, _, _),
    findall(date(Year, Month, Day), member(service(0120, date(Year, Month, Day), _, _, Charge, _, _, _), Services), LaserDates),
    list_to_set(LaserDates, UniqueLaserDates),
    length(LaserDates, TotalLaserCount),
    length(UniqueLaserDates, UniqueLaserCount),
    TotalLaserCount > UniqueLaserCount,
    print('Laser surcharge billed more than once on the same day'), 
    true.

is_invoice_invalid(Invoice) :-
    Invoice = invoice(Services, _, _, _),
    member(service(0120, Date, Multiplier, _, Charge, _, _, _), Services),
    member(service(ServiceNumber, Date, _, PointScore, _, _, _, _), Services),
    laser_service(ServiceNumber),
    ExpectedCharge is round(Multiplier * PointScore * 100) / 100,
    ExpectedCharge > 68,
    Charge > 68,
    print('Laser surcharge exceeds the maximum allowed amount of 68 Euros'),
    true.

laser_service(2410).
laser_service(3070).
laser_service(3080).
laser_service(3210).
laser_service(3240).
laser_service(4080).
laser_service(4090).
laser_service(4100).
laser_service(4130).
laser_service(4133).
laser_service(9160).

example_invoice(invoice([
		service(2410, date(2012, 2, 12), 2.3, 392.0, 50.71, 'Aufbereitung eines Wurzelkanals', '', []),
		service(0120, date(2012, 2, 12), 1.0, nan, 70.0, 'Zuschlag für die Anwendung eines Lasers bei Leistung nach Nummer 2410', '', [])
	],
	[
		
	],
	invoice_date(date(2012, 7, 3)),
	invoice_amount(120.71)
)).",False,"The surcharge according to number 0120 amounts to 100% of the basic fee rate for the respective service, but not more than 68 euros. The surcharge according to number 0120 can only be calculated once per treatment day.",False
15,1020,"{'_Positionen': [{'_Faktor': 2.3, '_Behandlungsdatum': '2012-02-12', '_Anzahl': 1, '_Betrag': 6.47, '_Leistungsbeschreibung': 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '_Nr': '1010', '_Typ': 'Service', '_Begründung': 'irgend eine Begründung'}, {'_Faktor': 2.3, '_Behandlungsdatum': '2012-02-12', '_Anzahl': 1, '_Betrag': 12.94, '_Leistungsbeschreibung': 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '_Nr': '0010', '_Typ': 'Service', '_Begründung': 'irgend eine Begründung'}], '_Kassenanteil': {'_KassenanteilSumme': None}, '_Rechnungsnummer': '97997', '_Rechnungsdatum': '2012-07-03', '_Rechnungsbetrag': 19.41, '_Waehrung': 'EUR'}",False,"Warning: c:/users/jonas/ideaprojects/idp/legal rule extraction goz/goz/src/temp.pl:18:
Warning:    Clauses of is_invoice_invalid/1 are not together in the source-file
Warning:    Earlier definition at c:/users/jonas/ideaprojects/idp/legal rule extraction goz/goz/src/temp.pl:2
Warning:    Current predicate: service_in_year/3
Warning:    Use :- discontiguous is_invoice_invalid/1. to suppress this message
ERROR: -g example_invoice(X), is_invoice_invalid(X).: false
","
is_invoice_invalid(Invoice) :-
    Invoice = invoice(Services, _, invoice_date(date(Year, _, _)), _),
    (exceeds_service_limit(Services, 1000, Year, 1) ->
        print('Service 1000 exceeded the allowed limit of 1 per year'), true;
    exceeds_service_limit(Services, 1010, Year, 3) ->
        print('Service 1010 exceeded the allowed limit of 3 per year'), true;
    false).

exceeds_service_limit(Services, ServiceNumber, Year, Limit) :-
    include(service_in_year(ServiceNumber, Year), Services, FilteredServices),
    length(FilteredServices, Count),
    Count > Limit.

service_in_year(ServiceNumber, Year, service(ServiceNumber, date(Year, _, _), _, _, _, _, _, _)).


is_invoice_invalid(Invoice) :-
    Invoice = invoice(Services, _, invoice_date(date(Year, _, _)), _),
    (exceeds_service_limit(Services, 1020, Year, 4) ->
        print('Service 1020 exceeded the allowed limit of 4 per year'), true;
    false).

% The predicate exceeds_service_limit/4 and service_in_year/3 can be reused from Rule 1.


% No translation possible due to the complexity and lack of predicates to define ""other purposes"" and check justifications.

example_invoice(invoice([
		service(1010, date(2012, 2, 12), 2.3, 100.0, 6.47, 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', 'irgend eine Begründung', []),
		service(0010, date(2012, 2, 12), 2.3, 100.0, 12.94, 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', 'irgend eine Begründung', [])
	],
	[
		
	],
	invoice_date(date(2012, 7, 3)),
	invoice_amount(19.41)
)).",True,"In connection with the services
according to numbers 1000 and 1010
services according to numbers 0010, 4000 and 8000 as well as consultations and examinations
in accordance with the
physicians' fee schedule are only billable
if these services serve other
purposes and this is justified in the
justified in the invoice",True
16,1020,"{'_Positionen': [{'_Faktor': 2.3, '_Behandlungsdatum': '2012-02-12', '_Anzahl': 1, '_Betrag': 6.47, '_Leistungsbeschreibung': 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '_Nr': '1010', '_Typ': 'Service'}, {'_Faktor': 2.3, '_Behandlungsdatum': '2012-02-12', '_Anzahl': 1, '_Betrag': 12.94, '_Leistungsbeschreibung': 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '_Nr': '0010', '_Typ': 'Service'}], '_Kassenanteil': {'_KassenanteilSumme': None}, '_Rechnungsnummer': '97997', '_Rechnungsdatum': '2012-07-03', '_Rechnungsbetrag': 19.41, '_Waehrung': 'EUR'}",False,"Warning: c:/users/jonas/ideaprojects/idp/legal rule extraction goz/goz/src/temp.pl:18:
Warning:    Clauses of is_invoice_invalid/1 are not together in the source-file
Warning:    Earlier definition at c:/users/jonas/ideaprojects/idp/legal rule extraction goz/goz/src/temp.pl:2
Warning:    Current predicate: service_in_year/3
Warning:    Use :- discontiguous is_invoice_invalid/1. to suppress this message
ERROR: -g example_invoice(X), is_invoice_invalid(X).: false
","
is_invoice_invalid(Invoice) :-
    Invoice = invoice(Services, _, invoice_date(date(Year, _, _)), _),
    (exceeds_service_limit(Services, 1000, Year, 1) ->
        print('Service 1000 exceeded the allowed limit of 1 per year'), true;
    exceeds_service_limit(Services, 1010, Year, 3) ->
        print('Service 1010 exceeded the allowed limit of 3 per year'), true;
    false).

exceeds_service_limit(Services, ServiceNumber, Year, Limit) :-
    include(service_in_year(ServiceNumber, Year), Services, FilteredServices),
    length(FilteredServices, Count),
    Count > Limit.

service_in_year(ServiceNumber, Year, service(ServiceNumber, date(Year, _, _), _, _, _, _, _, _)).


is_invoice_invalid(Invoice) :-
    Invoice = invoice(Services, _, invoice_date(date(Year, _, _)), _),
    (exceeds_service_limit(Services, 1020, Year, 4) ->
        print('Service 1020 exceeded the allowed limit of 4 per year'), true;
    false).

% The predicate exceeds_service_limit/4 and service_in_year/3 can be reused from Rule 1.


% No translation possible due to the complexity and lack of predicates to define ""other purposes"" and check justifications.

example_invoice(invoice([
		service(1010, date(2012, 2, 12), 2.3, 100.0, 6.47, 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '', []),
		service(0010, date(2012, 2, 12), 2.3, 100.0, 12.94, 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '', [])
	],
	[
		
	],
	invoice_date(date(2012, 7, 3)),
	invoice_amount(19.41)
)).",False,"In connection with the services
according to numbers 1000 and 1010
services according to numbers 0010, 4000 and 8000 as well as consultations and examinations
in accordance with the
physicians' fee schedule are only billable
if these services serve other
purposes and this is justified in the
justified in the invoice",True
17,1040,"{'_Positionen': [{'_Faktor': 2.3, '_Behandlungsdatum': '2012-02-12', '_Anzahl': 1, '_Betrag': 6.47, '_Leistungsbeschreibung': 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '_Nr': '1020', '_Typ': 'Service', '_Zahn': [15]}, {'_Faktor': 2.3, '_Behandlungsdatum': '2012-02-12', '_Anzahl': 1, '_Betrag': 3.62, '_Leistungsbeschreibung': 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '_Nr': '1040', '_Typ': 'Service', '_Zahn': [15]}], '_Kassenanteil': {'_KassenanteilSumme': None}, '_Rechnungsnummer': '97997', '_Rechnungsdatum': '2012-07-03', '_Rechnungsbetrag': 10.09, '_Waehrung': 'EUR'}",'Invoice is invalid because service 1040 is billed alongside other non-billable services.','Invoice is invalid because service 1040 is billed alongside other non-billable services.',"
is_invoice_invalid(Invoice) :-
    Invoice = invoice(Services, _, _, _),
    member(service(1040, _, _, _, _, _, _, _), Services),
    (   member(service(1020, _, _, _, _, _, _, _), Services);
        member(service(4050, _, _, _, _, _, _, _), Services);
        member(service(4055, _, _, _, _, _, _, _), Services);
        member(service(4060, _, _, _, _, _, _, _), Services);
        member(service(4070, _, _, _, _, _, _, _), Services);
        member(service(4075, _, _, _, _, _, _, _), Services);
        member(service(4090, _, _, _, _, _, _, _), Services);
        member(service(4100, _, _, _, _, _, _, _), Services)
    ),
    print('Invoice is invalid because service 1040 is billed alongside other non-billable services.'),
    true.
is_invoice_invalid(_).

example_invoice(invoice([
		service(1020, date(2012, 2, 12), 2.3, 50.0, 6.47, 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '', [tooth(1, 5)]),
		service(1040, date(2012, 2, 12), 2.3, 28.0, 3.62, 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '', [tooth(1, 5)])
	],
	[
		
	],
	invoice_date(date(2012, 7, 3)),
	invoice_amount(10.09)
)).",False,"The service according to number 1040 is not billable in addition to the services according to numbers 1020, 4050, 4055, 4060, 4070, 4075, 4090, and 4100.",False
18,1040,"{'_Positionen': [{'_Faktor': 2.3, '_Behandlungsdatum': '2012-02-12', '_Anzahl': 1, '_Betrag': 35.57, '_Leistungsbeschreibung': 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '_Nr': '4100', '_Typ': 'Service', '_Zahn': [15]}, {'_Faktor': 2.3, '_Behandlungsdatum': '2012-02-12', '_Anzahl': 1, '_Betrag': 3.62, '_Leistungsbeschreibung': 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '_Nr': '1040', '_Typ': 'Service', '_Zahn': [15]}], '_Kassenanteil': {'_KassenanteilSumme': None}, '_Rechnungsnummer': '97997', '_Rechnungsdatum': '2012-07-03', '_Rechnungsbetrag': 39.19, '_Waehrung': 'EUR'}",'Invoice is invalid because service 1040 is billed alongside other non-billable services.','Invoice is invalid because service 1040 is billed alongside other non-billable services.',"
is_invoice_invalid(Invoice) :-
    Invoice = invoice(Services, _, _, _),
    member(service(1040, _, _, _, _, _, _, _), Services),
    (   member(service(1020, _, _, _, _, _, _, _), Services);
        member(service(4050, _, _, _, _, _, _, _), Services);
        member(service(4055, _, _, _, _, _, _, _), Services);
        member(service(4060, _, _, _, _, _, _, _), Services);
        member(service(4070, _, _, _, _, _, _, _), Services);
        member(service(4075, _, _, _, _, _, _, _), Services);
        member(service(4090, _, _, _, _, _, _, _), Services);
        member(service(4100, _, _, _, _, _, _, _), Services)
    ),
    print('Invoice is invalid because service 1040 is billed alongside other non-billable services.'),
    true.
is_invoice_invalid(_).

example_invoice(invoice([
		service(4100, date(2012, 2, 12), 2.3, 275.0, 35.57, 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '', [tooth(1, 5)]),
		service(1040, date(2012, 2, 12), 2.3, 28.0, 3.62, 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '', [tooth(1, 5)])
	],
	[
		
	],
	invoice_date(date(2012, 7, 3)),
	invoice_amount(39.19)
)).",False,"The service according to number 1040 is not billable in addition to the services according to numbers 1020, 4050, 4055, 4060, 4070, 4075, 4090, and 4100.",False
19,2030,"{'_Positionen': [{'_Faktor': 2.3, '_Behandlungsdatum': '2012-02-12', '_Anzahl': 1, '_Betrag': 8.41, '_Leistungsbeschreibung': 'Präparieren', '_Nr': '2030', '_Zahn': [10], '_Typ': 'Service'}, {'_Faktor': 2.3, '_Behandlungsdatum': '2012-02-12', '_Anzahl': 1, '_Betrag': 8.41, '_Leistungsbeschreibung': 'Füllen', '_Nr': '2030', '_Zahn': [10], '_Typ': 'Service'}, {'_Faktor': 2.3, '_Behandlungsdatum': '2012-02-12', '_Anzahl': 1, '_Betrag': 8.41, '_Leistungsbeschreibung': 'Präparieren', '_Nr': '2030', '_Zahn': [20], '_Typ': 'Service'}], '_Kassenanteil': {'_KassenanteilSumme': None}, '_Rechnungsnummer': '97997', '_Rechnungsdatum': '2012-07-03', '_Rechnungsbetrag': 25.23, '_Waehrung': 'EUR'}",'Invalid invoice: Service 2030 billed more than once for the same jaw half or front tooth area for preparation or filling in a single session.','Invalid invoice: Service 2030 billed more than once for the same jaw half or front tooth area for preparation or filling in a single session.',"
% Helper predicate to count occurrences of service 2030 for a specific jaw half or front tooth area during a session
count_service_2030(Services, Date, Area, CountPreparation, CountFilling) :-
    include(service_2030_for_area_and_date(Area, Date), Services, FilteredServices),
    count_occurrences(FilteredServices, preparation, CountPreparation),
    count_occurrences(FilteredServices, filling, CountFilling).

% Predicate to check if a service is 2030, for a specific area and date
service_2030_for_area_and_date(Area, Date, service(2030, Date, _, _, _, Description, _, Teeth)) :-
    member(tooth(Area, _), Teeth),
    (Description == 'preparation'; Description == 'filling').

% Predicate to count occurrences of a specific description in a list of services
count_occurrences(Services, Description, Count) :-
    include(description_matches(Description), Services, Filtered),
    length(Filtered, Count).

% Predicate to check if the description of a service matches the given description
description_matches(Description, service(_, _, _, _, _, Description, _, _)).

% Predicate to check if an invoice is invalid based on Rule 1
is_invoice_invalid(Invoice) :-
    Invoice = invoice(Services, _, _, _),
    findall(Date-Area, member(service(2030, Date, _, _, _, _, _, [tooth(Area, _)]), Services), Occurrences),
    list_to_set(Occurrences, UniqueOccurrences),
    check_occurrences(Services, UniqueOccurrences),
    print('Invalid invoice: Service 2030 billed more than once for the same jaw half or front tooth area for preparation or filling in a single session.'),
    true.

% Predicate to iterate over unique occurrences and check the count for each
check_occurrences(_, []).
check_occurrences(Services, [Date-Area|Rest]) :-
    count_service_2030(Services, Date, Area, CountPreparation, CountFilling),
    CountPreparation =< 1,
    CountFilling =< 1,
    check_occurrences(Services, Rest).

example_invoice(invoice([
		service(2030, date(2012, 2, 12), 2.3, 65.0, 8.41, 'Präparieren', '', [tooth(1, 0)]),
		service(2030, date(2012, 2, 12), 2.3, 65.0, 8.41, 'Füllen', '', [tooth(1, 0)]),
		service(2030, date(2012, 2, 12), 2.3, 65.0, 8.41, 'Präparieren', '', [tooth(2, 0)])
	],
	[
		
	],
	invoice_date(date(2012, 7, 3)),
	invoice_amount(25.23)
)).",True,Die Leistung nach der Nummer 2030 ist je Sitzung für eine Kieferhälfte oder einen Frontzahnbereich höchstens einmal für besondere Maßnahmen beim Präparieren und höchstens einmal für besondere Maßnahmen beim Füllen von Kavitäten berechnungsfähig.,False
20,2030,"{'_Positionen': [{'_Faktor': 2.3, '_Behandlungsdatum': '2012-02-12', '_Anzahl': 1, '_Betrag': 8.41, '_Leistungsbeschreibung': 'Präparieren', '_Nr': '2030', '_Zahn': [10], '_Typ': 'Service'}, {'_Faktor': 2.3, '_Behandlungsdatum': '2012-02-12', '_Anzahl': 1, '_Betrag': 8.41, '_Leistungsbeschreibung': 'Präparieren', '_Nr': '2030', '_Zahn': [10], '_Typ': 'Service'}, {'_Faktor': 2.3, '_Behandlungsdatum': '2012-02-12', '_Anzahl': 1, '_Betrag': 8.41, '_Leistungsbeschreibung': 'Präparieren', '_Nr': '2030', '_Zahn': [10], '_Typ': 'Service'}], '_Kassenanteil': {'_KassenanteilSumme': None}, '_Rechnungsnummer': '97997', '_Rechnungsdatum': '2012-07-03', '_Rechnungsbetrag': 25.23, '_Waehrung': 'EUR'}",'Invalid invoice: Service 2030 billed more than once for the same jaw half or front tooth area for preparation or filling in a single session.','Invalid invoice: Service 2030 billed more than once for the same jaw half or front tooth area for preparation or filling in a single session.',"
% Helper predicate to count occurrences of service 2030 for a specific jaw half or front tooth area during a session
count_service_2030(Services, Date, Area, CountPreparation, CountFilling) :-
    include(service_2030_for_area_and_date(Area, Date), Services, FilteredServices),
    count_occurrences(FilteredServices, preparation, CountPreparation),
    count_occurrences(FilteredServices, filling, CountFilling).

% Predicate to check if a service is 2030, for a specific area and date
service_2030_for_area_and_date(Area, Date, service(2030, Date, _, _, _, Description, _, Teeth)) :-
    member(tooth(Area, _), Teeth),
    (Description == 'preparation'; Description == 'filling').

% Predicate to count occurrences of a specific description in a list of services
count_occurrences(Services, Description, Count) :-
    include(description_matches(Description), Services, Filtered),
    length(Filtered, Count).

% Predicate to check if the description of a service matches the given description
description_matches(Description, service(_, _, _, _, _, Description, _, _)).

% Predicate to check if an invoice is invalid based on Rule 1
is_invoice_invalid(Invoice) :-
    Invoice = invoice(Services, _, _, _),
    findall(Date-Area, member(service(2030, Date, _, _, _, _, _, [tooth(Area, _)]), Services), Occurrences),
    list_to_set(Occurrences, UniqueOccurrences),
    check_occurrences(Services, UniqueOccurrences),
    print('Invalid invoice: Service 2030 billed more than once for the same jaw half or front tooth area for preparation or filling in a single session.'),
    true.

% Predicate to iterate over unique occurrences and check the count for each
check_occurrences(_, []).
check_occurrences(Services, [Date-Area|Rest]) :-
    count_service_2030(Services, Date, Area, CountPreparation, CountFilling),
    CountPreparation =< 1,
    CountFilling =< 1,
    check_occurrences(Services, Rest).

example_invoice(invoice([
		service(2030, date(2012, 2, 12), 2.3, 65.0, 8.41, 'Präparieren', '', [tooth(1, 0)]),
		service(2030, date(2012, 2, 12), 2.3, 65.0, 8.41, 'Präparieren', '', [tooth(1, 0)]),
		service(2030, date(2012, 2, 12), 2.3, 65.0, 8.41, 'Präparieren', '', [tooth(1, 0)])
	],
	[
		
	],
	invoice_date(date(2012, 7, 3)),
	invoice_amount(25.23)
)).",False,Die Leistung nach der Nummer 2030 ist je Sitzung für eine Kieferhälfte oder einen Frontzahnbereich höchstens einmal für besondere Maßnahmen beim Präparieren und höchstens einmal für besondere Maßnahmen beim Füllen von Kavitäten berechnungsfähig.,False
21,2195,"{'_Positionen': [{'_Faktor': 2.3, '_Behandlungsdatum': '2012-02-12', '_Anzahl': 1, '_Betrag': 38.81, '_Leistungsbeschreibung': 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '_Nr': '2195', '_Zahn': [11], '_Typ': 'Service'}], '_Kassenanteil': {'_KassenanteilSumme': None}, '_Rechnungsnummer': '97997', '_Rechnungsdatum': '2012-07-03', '_Rechnungsbetrag': 38.81, '_Waehrung': 'EUR'}",False,"ERROR: -g example_invoice(X), is_invoice_invalid(X).: false
","
is_invoice_invalid(Invoice) :-
    Invoice = invoice(Services, _, _, _),
    member(service(2180, _, _, _, _, _, _, Teeth), Services),
    member(service(Service, _, _, _, _, _, _, Teeth), Services),
    between(2150, 2170, Service),
    print('Service 2180 cannot be billed alongside services 2150 to 2170 for the same tooth.'),
    !.

is_invoice_invalid(Invoice) :-
    Invoice = invoice(Services, _, _, _),
    member(service(2190, _, _, _, _, _, _, Teeth), Services),
    member(service(Service, _, _, _, _, _, _, Teeth), Services),
    between(2150, 2170, Service),
    print('Service 2190 cannot be billed alongside services 2150 to 2170 for the same tooth.'),
    !.

is_invoice_invalid(Invoice) :-
    Invoice = invoice(Services, _, _, _),
    member(service(2195, _, _, _, _, _, _, Teeth), Services),
    member(service(Service, _, _, _, _, _, _, Teeth), Services),
    between(2150, 2170, Service),
    print('Service 2195 cannot be billed alongside services 2150 to 2170 for the same tooth.'),
    !.


is_invoice_invalid(Invoice) :-
    Invoice = invoice(Services, _, _, _),
    member(service(2180, _, _, _, _, _, _, Teeth), Services),
    member(service(2190, _, _, _, _, _, _, Teeth), Services),
    print('Service 2180 cannot be billed alongside service 2190 for the same tooth.'),
    !.




is_invoice_invalid(Invoice) :-
    Invoice = invoice(Services, _, _, _),
    findall(T, member(service(2180, _, _, _, _, _, _, [T]), Services), Teeth2180),
    findall(T, member(service(2190, _, _, _, _, _, _, [T]), Services), Teeth2190),
    findall(T, member(service(2195, _, _, _, _, _, _, [T]), Services), Teeth2195),
    append(Teeth2180, Teeth2190, Teeth2180_2190),
    append(Teeth2180_2190, Teeth2195, AllTeeth),
    sort(AllTeeth, SortedTeeth),
    length(AllTeeth, LengthAll),
    length(SortedTeeth, LengthSorted),
    LengthAll \= LengthSorted,
    print('Services 2180, 2190, and 2195 can only be billed once per tooth.'),
    !.

example_invoice(invoice([
		service(2195, date(2012, 2, 12), 2.3, 300.0, 38.81, 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '', [tooth(1, 1)])
	],
	[
		
	],
	invoice_date(date(2012, 7, 3)),
	invoice_amount(38.81)
)).",True,"Die Leistungen nach den Nummern 2180, 2190 oder 2195 sind neben den Leistungen nach den Nummern 2150 bis 2170 nicht berechnungsfähig.",True
22,2195,"{'_Positionen': [{'_Faktor': 2.3, '_Behandlungsdatum': '2012-02-12', '_Anzahl': 1, '_Betrag': 38.81, '_Leistungsbeschreibung': 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '_Nr': '2195', '_Zahn': [11], '_Typ': 'Service'}, {'_Faktor': 2.3, '_Behandlungsdatum': '2012-02-12', '_Anzahl': 1, '_Betrag': 19.4, '_Leistungsbeschreibung': 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '_Nr': '2180', '_Zahn': [11], '_Typ': 'Service'}, {'_Faktor': 2.3, '_Behandlungsdatum': '2012-02-12', '_Anzahl': 1, '_Betrag': 147.6, '_Leistungsbeschreibung': 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '_Nr': '2150', '_Zahn': [11], '_Typ': 'Service'}], '_Kassenanteil': {'_KassenanteilSumme': None}, '_Rechnungsnummer': '97997', '_Rechnungsdatum': '2012-07-03', '_Rechnungsbetrag': 205.81, '_Waehrung': 'EUR'}",'Service 2180 cannot be billed alongside services 2150 to 2170 for the same tooth.','Service 2180 cannot be billed alongside services 2150 to 2170 for the same tooth.',"
is_invoice_invalid(Invoice) :-
    Invoice = invoice(Services, _, _, _),
    member(service(2180, _, _, _, _, _, _, Teeth), Services),
    member(service(Service, _, _, _, _, _, _, Teeth), Services),
    between(2150, 2170, Service),
    print('Service 2180 cannot be billed alongside services 2150 to 2170 for the same tooth.'),
    !.

is_invoice_invalid(Invoice) :-
    Invoice = invoice(Services, _, _, _),
    member(service(2190, _, _, _, _, _, _, Teeth), Services),
    member(service(Service, _, _, _, _, _, _, Teeth), Services),
    between(2150, 2170, Service),
    print('Service 2190 cannot be billed alongside services 2150 to 2170 for the same tooth.'),
    !.

is_invoice_invalid(Invoice) :-
    Invoice = invoice(Services, _, _, _),
    member(service(2195, _, _, _, _, _, _, Teeth), Services),
    member(service(Service, _, _, _, _, _, _, Teeth), Services),
    between(2150, 2170, Service),
    print('Service 2195 cannot be billed alongside services 2150 to 2170 for the same tooth.'),
    !.


is_invoice_invalid(Invoice) :-
    Invoice = invoice(Services, _, _, _),
    member(service(2180, _, _, _, _, _, _, Teeth), Services),
    member(service(2190, _, _, _, _, _, _, Teeth), Services),
    print('Service 2180 cannot be billed alongside service 2190 for the same tooth.'),
    !.




is_invoice_invalid(Invoice) :-
    Invoice = invoice(Services, _, _, _),
    findall(T, member(service(2180, _, _, _, _, _, _, [T]), Services), Teeth2180),
    findall(T, member(service(2190, _, _, _, _, _, _, [T]), Services), Teeth2190),
    findall(T, member(service(2195, _, _, _, _, _, _, [T]), Services), Teeth2195),
    append(Teeth2180, Teeth2190, Teeth2180_2190),
    append(Teeth2180_2190, Teeth2195, AllTeeth),
    sort(AllTeeth, SortedTeeth),
    length(AllTeeth, LengthAll),
    length(SortedTeeth, LengthSorted),
    LengthAll \= LengthSorted,
    print('Services 2180, 2190, and 2195 can only be billed once per tooth.'),
    !.

example_invoice(invoice([
		service(2195, date(2012, 2, 12), 2.3, 300.0, 38.81, 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '', [tooth(1, 1)]),
		service(2180, date(2012, 2, 12), 2.3, 150.0, 19.4, 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '', [tooth(1, 1)]),
		service(2150, date(2012, 2, 12), 2.3, 1141.0, 147.6, 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '', [tooth(1, 1)])
	],
	[
		
	],
	invoice_date(date(2012, 7, 3)),
	invoice_amount(205.81)
)).",False,"Die Leistungen nach den Nummern 2180, 2190 oder 2195 sind neben den Leistungen nach den Nummern 2150 bis 2170 nicht berechnungsfähig.",False
23,2195,"{'_Positionen': [{'_Faktor': 2.3, '_Behandlungsdatum': '2012-02-12', '_Anzahl': 1, '_Betrag': 58.21, '_Leistungsbeschreibung': 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '_Nr': '2190', '_Zahn': [11], '_Typ': 'Service'}, {'_Faktor': 2.3, '_Behandlungsdatum': '2012-02-12', '_Anzahl': 1, '_Betrag': 19.4, '_Leistungsbeschreibung': 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '_Nr': '2180', '_Zahn': [11], '_Typ': 'Service'}], '_Kassenanteil': {'_KassenanteilSumme': None}, '_Rechnungsnummer': '97997', '_Rechnungsdatum': '2012-07-03', '_Rechnungsbetrag': 77.61, '_Waehrung': 'EUR'}",'Service 2180 cannot be billed alongside service 2190 for the same tooth.','Service 2180 cannot be billed alongside service 2190 for the same tooth.',"
is_invoice_invalid(Invoice) :-
    Invoice = invoice(Services, _, _, _),
    member(service(2180, _, _, _, _, _, _, Teeth), Services),
    member(service(Service, _, _, _, _, _, _, Teeth), Services),
    between(2150, 2170, Service),
    print('Service 2180 cannot be billed alongside services 2150 to 2170 for the same tooth.'),
    !.

is_invoice_invalid(Invoice) :-
    Invoice = invoice(Services, _, _, _),
    member(service(2190, _, _, _, _, _, _, Teeth), Services),
    member(service(Service, _, _, _, _, _, _, Teeth), Services),
    between(2150, 2170, Service),
    print('Service 2190 cannot be billed alongside services 2150 to 2170 for the same tooth.'),
    !.

is_invoice_invalid(Invoice) :-
    Invoice = invoice(Services, _, _, _),
    member(service(2195, _, _, _, _, _, _, Teeth), Services),
    member(service(Service, _, _, _, _, _, _, Teeth), Services),
    between(2150, 2170, Service),
    print('Service 2195 cannot be billed alongside services 2150 to 2170 for the same tooth.'),
    !.


is_invoice_invalid(Invoice) :-
    Invoice = invoice(Services, _, _, _),
    member(service(2180, _, _, _, _, _, _, Teeth), Services),
    member(service(2190, _, _, _, _, _, _, Teeth), Services),
    print('Service 2180 cannot be billed alongside service 2190 for the same tooth.'),
    !.




is_invoice_invalid(Invoice) :-
    Invoice = invoice(Services, _, _, _),
    findall(T, member(service(2180, _, _, _, _, _, _, [T]), Services), Teeth2180),
    findall(T, member(service(2190, _, _, _, _, _, _, [T]), Services), Teeth2190),
    findall(T, member(service(2195, _, _, _, _, _, _, [T]), Services), Teeth2195),
    append(Teeth2180, Teeth2190, Teeth2180_2190),
    append(Teeth2180_2190, Teeth2195, AllTeeth),
    sort(AllTeeth, SortedTeeth),
    length(AllTeeth, LengthAll),
    length(SortedTeeth, LengthSorted),
    LengthAll \= LengthSorted,
    print('Services 2180, 2190, and 2195 can only be billed once per tooth.'),
    !.

example_invoice(invoice([
		service(2190, date(2012, 2, 12), 2.3, 450.0, 58.21, 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '', [tooth(1, 1)]),
		service(2180, date(2012, 2, 12), 2.3, 150.0, 19.4, 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '', [tooth(1, 1)])
	],
	[
		
	],
	invoice_date(date(2012, 7, 3)),
	invoice_amount(77.61)
)).",False,Die Leistung nach der Nummer 2180 ist neben der Leistung nach der Nummer 2190 nicht berechnungsfähig.,False
24,2195,"{'_Positionen': [{'_Faktor': 2.3, '_Behandlungsdatum': '2012-02-12', '_Anzahl': 1, '_Betrag': 58.21, '_Leistungsbeschreibung': 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '_Nr': '2190', '_Zahn': [11], '_Typ': 'Service'}, {'_Faktor': 2.3, '_Behandlungsdatum': '2012-02-12', '_Anzahl': 1, '_Betrag': 58.21, '_Leistungsbeschreibung': 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '_Nr': '2190', '_Zahn': [12], '_Typ': 'Service'}], '_Kassenanteil': {'_KassenanteilSumme': None}, '_Rechnungsnummer': '97997', '_Rechnungsdatum': '2012-07-03', '_Rechnungsbetrag': 116.42, '_Waehrung': 'EUR'}",False,"ERROR: -g example_invoice(X), is_invoice_invalid(X).: false
","
is_invoice_invalid(Invoice) :-
    Invoice = invoice(Services, _, _, _),
    member(service(2180, _, _, _, _, _, _, Teeth), Services),
    member(service(Service, _, _, _, _, _, _, Teeth), Services),
    between(2150, 2170, Service),
    print('Service 2180 cannot be billed alongside services 2150 to 2170 for the same tooth.'),
    !.

is_invoice_invalid(Invoice) :-
    Invoice = invoice(Services, _, _, _),
    member(service(2190, _, _, _, _, _, _, Teeth), Services),
    member(service(Service, _, _, _, _, _, _, Teeth), Services),
    between(2150, 2170, Service),
    print('Service 2190 cannot be billed alongside services 2150 to 2170 for the same tooth.'),
    !.

is_invoice_invalid(Invoice) :-
    Invoice = invoice(Services, _, _, _),
    member(service(2195, _, _, _, _, _, _, Teeth), Services),
    member(service(Service, _, _, _, _, _, _, Teeth), Services),
    between(2150, 2170, Service),
    print('Service 2195 cannot be billed alongside services 2150 to 2170 for the same tooth.'),
    !.


is_invoice_invalid(Invoice) :-
    Invoice = invoice(Services, _, _, _),
    member(service(2180, _, _, _, _, _, _, Teeth), Services),
    member(service(2190, _, _, _, _, _, _, Teeth), Services),
    print('Service 2180 cannot be billed alongside service 2190 for the same tooth.'),
    !.




is_invoice_invalid(Invoice) :-
    Invoice = invoice(Services, _, _, _),
    findall(T, member(service(2180, _, _, _, _, _, _, [T]), Services), Teeth2180),
    findall(T, member(service(2190, _, _, _, _, _, _, [T]), Services), Teeth2190),
    findall(T, member(service(2195, _, _, _, _, _, _, [T]), Services), Teeth2195),
    append(Teeth2180, Teeth2190, Teeth2180_2190),
    append(Teeth2180_2190, Teeth2195, AllTeeth),
    sort(AllTeeth, SortedTeeth),
    length(AllTeeth, LengthAll),
    length(SortedTeeth, LengthSorted),
    LengthAll \= LengthSorted,
    print('Services 2180, 2190, and 2195 can only be billed once per tooth.'),
    !.

example_invoice(invoice([
		service(2190, date(2012, 2, 12), 2.3, 450.0, 58.21, 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '', [tooth(1, 1)]),
		service(2190, date(2012, 2, 12), 2.3, 450.0, 58.21, 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '', [tooth(1, 2)])
	],
	[
		
	],
	invoice_date(date(2012, 7, 3)),
	invoice_amount(116.42)
)).",True,"Die Leistungen nach den Nummern 2180, 2190 und/oder die Leistung nach der Nummer 2195 ist je Zahn nur jeweils einmal berechnungsfähig.
",True
25,2195,"{'_Positionen': [{'_Faktor': 2.3, '_Behandlungsdatum': '2012-02-12', '_Anzahl': 1, '_Betrag': 58.21, '_Leistungsbeschreibung': 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '_Nr': '2190', '_Zahn': [11], '_Typ': 'Service'}, {'_Faktor': 2.3, '_Behandlungsdatum': '2012-02-12', '_Anzahl': 1, '_Betrag': 58.21, '_Leistungsbeschreibung': 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '_Nr': '2190', '_Zahn': [11], '_Typ': 'Service'}], '_Kassenanteil': {'_KassenanteilSumme': None}, '_Rechnungsnummer': '97997', '_Rechnungsdatum': '2012-07-03', '_Rechnungsbetrag': 116.42, '_Waehrung': 'EUR'}","'Services 2180, 2190, and 2195 can only be billed once per tooth.'","'Services 2180, 2190, and 2195 can only be billed once per tooth.'","
is_invoice_invalid(Invoice) :-
    Invoice = invoice(Services, _, _, _),
    member(service(2180, _, _, _, _, _, _, Teeth), Services),
    member(service(Service, _, _, _, _, _, _, Teeth), Services),
    between(2150, 2170, Service),
    print('Service 2180 cannot be billed alongside services 2150 to 2170 for the same tooth.'),
    !.

is_invoice_invalid(Invoice) :-
    Invoice = invoice(Services, _, _, _),
    member(service(2190, _, _, _, _, _, _, Teeth), Services),
    member(service(Service, _, _, _, _, _, _, Teeth), Services),
    between(2150, 2170, Service),
    print('Service 2190 cannot be billed alongside services 2150 to 2170 for the same tooth.'),
    !.

is_invoice_invalid(Invoice) :-
    Invoice = invoice(Services, _, _, _),
    member(service(2195, _, _, _, _, _, _, Teeth), Services),
    member(service(Service, _, _, _, _, _, _, Teeth), Services),
    between(2150, 2170, Service),
    print('Service 2195 cannot be billed alongside services 2150 to 2170 for the same tooth.'),
    !.


is_invoice_invalid(Invoice) :-
    Invoice = invoice(Services, _, _, _),
    member(service(2180, _, _, _, _, _, _, Teeth), Services),
    member(service(2190, _, _, _, _, _, _, Teeth), Services),
    print('Service 2180 cannot be billed alongside service 2190 for the same tooth.'),
    !.




is_invoice_invalid(Invoice) :-
    Invoice = invoice(Services, _, _, _),
    findall(T, member(service(2180, _, _, _, _, _, _, [T]), Services), Teeth2180),
    findall(T, member(service(2190, _, _, _, _, _, _, [T]), Services), Teeth2190),
    findall(T, member(service(2195, _, _, _, _, _, _, [T]), Services), Teeth2195),
    append(Teeth2180, Teeth2190, Teeth2180_2190),
    append(Teeth2180_2190, Teeth2195, AllTeeth),
    sort(AllTeeth, SortedTeeth),
    length(AllTeeth, LengthAll),
    length(SortedTeeth, LengthSorted),
    LengthAll \= LengthSorted,
    print('Services 2180, 2190, and 2195 can only be billed once per tooth.'),
    !.

example_invoice(invoice([
		service(2190, date(2012, 2, 12), 2.3, 450.0, 58.21, 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '', [tooth(1, 1)]),
		service(2190, date(2012, 2, 12), 2.3, 450.0, 58.21, 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '', [tooth(1, 1)])
	],
	[
		
	],
	invoice_date(date(2012, 7, 3)),
	invoice_amount(116.42)
)).",False,"Die Leistungen nach den Nummern 2180, 2190 und/oder die Leistung nach der Nummer 2195 ist je Zahn nur jeweils einmal berechnungsfähig.
",False
26,2220,"{'_Positionen': [{'_Faktor': 2.3, '_Behandlungsdatum': '2012-02-12', '_Anzahl': 1, '_Betrag': 267.38, '_Leistungsbeschreibung': 'Versorgung eines Zahnes durch eine Teilkrone', '_Nr': '2220', '_Zahn': [11], '_Typ': 'Service'}, {'_Faktor': 2.3, '_Behandlungsdatum': '2012-02-12', '_Anzahl': 1, '_Betrag': 147.6, '_Leistungsbeschreibung': 'Einlagefüllung, einflächig', '_Nr': '2150', '_Zahn': [11], '_Typ': 'Service'}], '_Kassenanteil': {'_KassenanteilSumme': None}, '_Rechnungsnummer': '97997', '_Rechnungsdatum': '2012-07-03', '_Rechnungsbetrag': 414.98, '_Waehrung': 'EUR'}",False,"Warning: c:/users/jonas/ideaprojects/idp/legal rule extraction goz/goz/src/temp.pl:15:
Warning:    Clauses of is_invoice_invalid/1 are not together in the source-file
Warning:    Earlier definition at c:/users/jonas/ideaprojects/idp/legal rule extraction goz/goz/src/temp.pl:2
Warning:    Current predicate: service_in_range/3
Warning:    Use :- discontiguous is_invoice_invalid/1. to suppress this message
Warning: c:/users/jonas/ideaprojects/idp/legal rule extraction goz/goz/src/temp.pl:23:
Warning:    Singleton variables: [Area]
ERROR: -g example_invoice(X), is_invoice_invalid(X).: false
","
is_invoice_invalid(Invoice) :-
    Invoice = invoice(Services, _, _, _),
    service_in_range(Services, 2200, 2220),
    service_in_range(Services, 2050, 2130),
    print('Services between 2050 to 2130 cannot be billed alongside services between 2200 to 2220.'),
    true.

service_in_range(Services, Min, Max) :-
    member(service(ServiceNumber, _, _, _, _, _, _, _), Services),
    ServiceNumber >= Min,
    ServiceNumber =< Max.


is_invoice_invalid(Invoice) :-
    Invoice = invoice(Services, _, _, _),
    member(service(2210, _, _, _, _, _, _, Teeth), Services),
    member(tooth(Area, _), Teeth),
    implant_area(Area),
    print('Service 2210 is not billable with implants.'),
    true.

implant_area(Area) :-
    % TODO: Implement the actual rules for implant areas based on GOZ.
    false.







example_invoice(invoice([
		service(2220, date(2012, 2, 12), 2.3, 2067.0, 267.38, 'Versorgung eines Zahnes durch eine Teilkrone', '', [tooth(1, 1)]),
		service(2150, date(2012, 2, 12), 2.3, 1141.0, 147.6, 'Einlagefüllung, einflächig', '', [tooth(1, 1)])
	],
	[
		
	],
	invoice_date(date(2012, 7, 3)),
	invoice_amount(414.98)
)).",True,,True
27,2220,"{'_Positionen': [{'_Faktor': 2.3, '_Behandlungsdatum': '2012-02-12', '_Anzahl': 1, '_Betrag': 267.38, '_Leistungsbeschreibung': 'Versorgung eines Zahnes durch eine Teilkrone', '_Nr': '2220', '_Zahn': [11], '_Typ': 'Service'}, {'_Faktor': 2.3, '_Behandlungsdatum': '2012-02-12', '_Anzahl': 1, '_Betrag': 27.55, '_Leistungsbeschreibung': 'Präparieren einer Kavität und Restauration mit plastischem Füllungsmaterial', '_Nr': '2050', '_Zahn': [11], '_Typ': 'Service'}], '_Kassenanteil': {'_KassenanteilSumme': None}, '_Rechnungsnummer': '97997', '_Rechnungsdatum': '2012-07-03', '_Rechnungsbetrag': 294.93, '_Waehrung': 'EUR'}",'Services between 2050 to 2130 cannot be billed alongside services between 2200 to 2220.',"Warning: c:/users/jonas/ideaprojects/idp/legal rule extraction goz/goz/src/temp.pl:15:
Warning:    Clauses of is_invoice_invalid/1 are not together in the source-file
Warning:    Earlier definition at c:/users/jonas/ideaprojects/idp/legal rule extraction goz/goz/src/temp.pl:2
Warning:    Current predicate: service_in_range/3
Warning:    Use :- discontiguous is_invoice_invalid/1. to suppress this message
Warning: c:/users/jonas/ideaprojects/idp/legal rule extraction goz/goz/src/temp.pl:23:
Warning:    Singleton variables: [Area]
'Services between 2050 to 2130 cannot be billed alongside services between 2200 to 2220.'","
is_invoice_invalid(Invoice) :-
    Invoice = invoice(Services, _, _, _),
    service_in_range(Services, 2200, 2220),
    service_in_range(Services, 2050, 2130),
    print('Services between 2050 to 2130 cannot be billed alongside services between 2200 to 2220.'),
    true.

service_in_range(Services, Min, Max) :-
    member(service(ServiceNumber, _, _, _, _, _, _, _), Services),
    ServiceNumber >= Min,
    ServiceNumber =< Max.


is_invoice_invalid(Invoice) :-
    Invoice = invoice(Services, _, _, _),
    member(service(2210, _, _, _, _, _, _, Teeth), Services),
    member(tooth(Area, _), Teeth),
    implant_area(Area),
    print('Service 2210 is not billable with implants.'),
    true.

implant_area(Area) :-
    % TODO: Implement the actual rules for implant areas based on GOZ.
    false.







example_invoice(invoice([
		service(2220, date(2012, 2, 12), 2.3, 2067.0, 267.38, 'Versorgung eines Zahnes durch eine Teilkrone', '', [tooth(1, 1)]),
		service(2050, date(2012, 2, 12), 2.3, 213.0, 27.55, 'Präparieren einer Kavität und Restauration mit plastischem Füllungsmaterial', '', [tooth(1, 1)])
	],
	[
		
	],
	invoice_date(date(2012, 7, 3)),
	invoice_amount(294.93)
)).",False,Neben den Leistungen nach den Nummern 2200 bis 2220 sind die Leistungen nach den Nummern 2050 bis 2130 nicht berechnungsfähig.,False
28,2220,"{'_Positionen': [{'_Faktor': 2.3, '_Behandlungsdatum': '2012-02-12', '_Anzahl': 1, '_Betrag': 217.06, '_Leistungsbeschreibung': 'Versorgung eines Zahnes durch eine Vollkrone', '_Nr': '2210', '_Zahn': [11], '_Typ': 'Service'}, {'_Faktor': 2.3, '_Behandlungsdatum': '2012-02-12', '_Anzahl': 1, '_Betrag': 83.05, '_Leistungsbeschreibung': 'Präparieren einer Kavität und Restauration mit Kompositmaterialien', '_Nr': '2100', '_Zahn': [11], '_Typ': 'Service'}], '_Kassenanteil': {'_KassenanteilSumme': None}, '_Rechnungsnummer': '97997', '_Rechnungsdatum': '2012-07-03', '_Rechnungsbetrag': 300.11, '_Waehrung': 'EUR'}",'Services between 2050 to 2130 cannot be billed alongside services between 2200 to 2220.',"Warning: c:/users/jonas/ideaprojects/idp/legal rule extraction goz/goz/src/temp.pl:15:
Warning:    Clauses of is_invoice_invalid/1 are not together in the source-file
Warning:    Earlier definition at c:/users/jonas/ideaprojects/idp/legal rule extraction goz/goz/src/temp.pl:2
Warning:    Current predicate: service_in_range/3
Warning:    Use :- discontiguous is_invoice_invalid/1. to suppress this message
Warning: c:/users/jonas/ideaprojects/idp/legal rule extraction goz/goz/src/temp.pl:23:
Warning:    Singleton variables: [Area]
'Services between 2050 to 2130 cannot be billed alongside services between 2200 to 2220.'","
is_invoice_invalid(Invoice) :-
    Invoice = invoice(Services, _, _, _),
    service_in_range(Services, 2200, 2220),
    service_in_range(Services, 2050, 2130),
    print('Services between 2050 to 2130 cannot be billed alongside services between 2200 to 2220.'),
    true.

service_in_range(Services, Min, Max) :-
    member(service(ServiceNumber, _, _, _, _, _, _, _), Services),
    ServiceNumber >= Min,
    ServiceNumber =< Max.


is_invoice_invalid(Invoice) :-
    Invoice = invoice(Services, _, _, _),
    member(service(2210, _, _, _, _, _, _, Teeth), Services),
    member(tooth(Area, _), Teeth),
    implant_area(Area),
    print('Service 2210 is not billable with implants.'),
    true.

implant_area(Area) :-
    % TODO: Implement the actual rules for implant areas based on GOZ.
    false.







example_invoice(invoice([
		service(2210, date(2012, 2, 12), 2.3, 1678.0, 217.06, 'Versorgung eines Zahnes durch eine Vollkrone', '', [tooth(1, 1)]),
		service(2100, date(2012, 2, 12), 2.3, 642.0, 83.05, 'Präparieren einer Kavität und Restauration mit Kompositmaterialien', '', [tooth(1, 1)])
	],
	[
		
	],
	invoice_date(date(2012, 7, 3)),
	invoice_amount(300.11)
)).",False,Neben den Leistungen nach den Nummern 2200 bis 2220 sind die Leistungen nach den Nummern 2050 bis 2130 nicht berechnungsfähig.,False
29,2240,"{'_Positionen': [{'_Faktor': 2.3, '_Behandlungsdatum': '2012-02-12', '_Anzahl': 1, '_Betrag': 9.05, '_Leistungsbeschreibung': 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '_Nr': '2240', '_Zahn': [11], '_Typ': 'Service', '_Begründung': 'It was impossible for the dentist to continue the treatment or a continuation was not indicated for medical reasons.'}], '_Kassenanteil': {'_KassenanteilSumme': None}, '_Rechnungsnummer': '97997', '_Rechnungsdatum': '2012-07-03', '_Rechnungsbetrag': 9.05, '_Waehrung': 'EUR'}",Error,"ERROR: -g example_invoice(X), is_invoice_invalid(X).: '<meta-call>'/1: Unknown procedure: is_invoice_invalid/1
","

example_invoice(invoice([
		service(2240, date(2012, 2, 12), 2.3, nan, 9.05, 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', 'It was impossible for the dentist to continue the treatment or a continuation was not indicated for medical reasons.', [tooth(1, 1)])
	],
	[
		
	],
	invoice_date(date(2012, 7, 3)),
	invoice_amount(9.05)
)).",True,"Die Leistung nach den Nummern 2230 oder 2240 sind nur berechnungsfähig, wenn es dem Zahnarzt objektiv auf Dauer unmöglich war, die Behandlung fortzusetzen oder eine Fortsetzung aus medizinischen Gründen nicht indiziert war.",False
30,2240,"{'_Positionen': [{'_Faktor': 2.3, '_Behandlungsdatum': '2012-02-12', '_Anzahl': 1, '_Betrag': 9.05, '_Leistungsbeschreibung': 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '_Nr': '2240', '_Zahn': [11], '_Typ': 'Service'}], '_Kassenanteil': {'_KassenanteilSumme': None}, '_Rechnungsnummer': '97997', '_Rechnungsdatum': '2012-07-03', '_Rechnungsbetrag': 9.05, '_Waehrung': 'EUR'}",Error,"ERROR: -g example_invoice(X), is_invoice_invalid(X).: '<meta-call>'/1: Unknown procedure: is_invoice_invalid/1
","

example_invoice(invoice([
		service(2240, date(2012, 2, 12), 2.3, nan, 9.05, 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '', [tooth(1, 1)])
	],
	[
		
	],
	invoice_date(date(2012, 7, 3)),
	invoice_amount(9.05)
)).",False,"Die Leistung nach den Nummern 2230 oder 2240 sind nur berechnungsfähig, wenn es dem Zahnarzt objektiv auf Dauer unmöglich war, die Behandlung fortzusetzen oder eine Fortsetzung aus medizinischen Gründen nicht indiziert war.",False
31,2400,"{'_Positionen': [{'_Faktor': 2.3, '_Behandlungsdatum': '2012-02-12', '_Anzahl': 1, '_Betrag': 9.05, '_Leistungsbeschreibung': 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '_Nr': '2400', '_Zahn': [11], '_Typ': 'Service'}, {'_Faktor': 2.3, '_Behandlungsdatum': '2012-02-12', '_Anzahl': 1, '_Betrag': 9.05, '_Leistungsbeschreibung': 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '_Nr': '2400', '_Zahn': [11], '_Typ': 'Service'}, {'_Faktor': 2.3, '_Behandlungsdatum': '2012-02-12', '_Anzahl': 1, '_Betrag': 9.05, '_Leistungsbeschreibung': 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '_Nr': '2400', '_Zahn': [12], '_Typ': 'Service'}], '_Kassenanteil': {'_KassenanteilSumme': None}, '_Rechnungsnummer': '97997', '_Rechnungsdatum': '2012-07-03', '_Rechnungsbetrag': 27.15, '_Waehrung': 'EUR'}",False,"ERROR: -g example_invoice(X), is_invoice_invalid(X).: false
","
is_invoice_invalid(Invoice) :-
    Invoice = invoice(Services, _, _, _),
    findall((Tooth, Date), member(service(2400, Date, _, _, _, _, _, [Tooth]), Services), ServiceList),
    find_duplicate_services(ServiceList, Duplicates),
    Duplicates \= [],
    print('Elektrometrische Längenbestimmung eines Wurzelkanals wurde mehr als zweimal in einer Sitzung berechnet.'),
    true.

find_duplicate_services(ServiceList, Duplicates) :-
    sort(ServiceList, Sorted),
    find_duplicates(Sorted, Duplicates).

find_duplicates([X, X | T], [X | D]) :- 
    find_duplicates([X | T], D), !.
find_duplicates([X, Y | T], D) :- 
    X \= Y, 
    find_duplicates([Y | T], D).
find_duplicates([], []).

example_invoice(invoice([
		service(2400, date(2012, 2, 12), 2.3, 70.0, 9.05, 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '', [tooth(1, 1)]),
		service(2400, date(2012, 2, 12), 2.3, 70.0, 9.05, 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '', [tooth(1, 1)]),
		service(2400, date(2012, 2, 12), 2.3, 70.0, 9.05, 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '', [tooth(1, 2)])
	],
	[
		
	],
	invoice_date(date(2012, 7, 3)),
	invoice_amount(27.15)
)).",True,Die Leistung nach der Nummer 2400 ist je Wurzelkanal höchstens zweimal je Sitzung berechnungsfähig.,True
32,2400,"{'_Positionen': [{'_Faktor': 2.3, '_Behandlungsdatum': '2012-02-12', '_Anzahl': 1, '_Betrag': 9.05, '_Leistungsbeschreibung': 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '_Nr': '2400', '_Zahn': [11], '_Typ': 'Service'}, {'_Faktor': 2.3, '_Behandlungsdatum': '2012-02-12', '_Anzahl': 1, '_Betrag': 9.05, '_Leistungsbeschreibung': 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '_Nr': '2400', '_Zahn': [11], '_Typ': 'Service'}, {'_Faktor': 2.3, '_Behandlungsdatum': '2012-03-12', '_Anzahl': 1, '_Betrag': 9.05, '_Leistungsbeschreibung': 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '_Nr': '2400', '_Zahn': [11], '_Typ': 'Service'}], '_Kassenanteil': {'_KassenanteilSumme': None}, '_Rechnungsnummer': '97997', '_Rechnungsdatum': '2012-07-03', '_Rechnungsbetrag': 27.15, '_Waehrung': 'EUR'}",False,"ERROR: -g example_invoice(X), is_invoice_invalid(X).: false
","
is_invoice_invalid(Invoice) :-
    Invoice = invoice(Services, _, _, _),
    findall((Tooth, Date), member(service(2400, Date, _, _, _, _, _, [Tooth]), Services), ServiceList),
    find_duplicate_services(ServiceList, Duplicates),
    Duplicates \= [],
    print('Elektrometrische Längenbestimmung eines Wurzelkanals wurde mehr als zweimal in einer Sitzung berechnet.'),
    true.

find_duplicate_services(ServiceList, Duplicates) :-
    sort(ServiceList, Sorted),
    find_duplicates(Sorted, Duplicates).

find_duplicates([X, X | T], [X | D]) :- 
    find_duplicates([X | T], D), !.
find_duplicates([X, Y | T], D) :- 
    X \= Y, 
    find_duplicates([Y | T], D).
find_duplicates([], []).

example_invoice(invoice([
		service(2400, date(2012, 2, 12), 2.3, 70.0, 9.05, 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '', [tooth(1, 1)]),
		service(2400, date(2012, 2, 12), 2.3, 70.0, 9.05, 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '', [tooth(1, 1)]),
		service(2400, date(2012, 3, 12), 2.3, 70.0, 9.05, 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '', [tooth(1, 1)])
	],
	[
		
	],
	invoice_date(date(2012, 7, 3)),
	invoice_amount(27.15)
)).",True,Die Leistung nach der Nummer 2400 ist je Wurzelkanal höchstens zweimal je Sitzung berechnungsfähig.,True
33,2400,"{'_Positionen': [{'_Faktor': 2.3, '_Behandlungsdatum': '2012-02-12', '_Anzahl': 1, '_Betrag': 9.05, '_Leistungsbeschreibung': 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '_Nr': '2400', '_Zahn': [11], '_Typ': 'Service'}, {'_Faktor': 2.3, '_Behandlungsdatum': '2012-02-12', '_Anzahl': 1, '_Betrag': 9.05, '_Leistungsbeschreibung': 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '_Nr': '2400', '_Zahn': [11], '_Typ': 'Service'}, {'_Faktor': 2.3, '_Behandlungsdatum': '2012-02-12', '_Anzahl': 1, '_Betrag': 9.05, '_Leistungsbeschreibung': 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '_Nr': '2400', '_Zahn': [11], '_Typ': 'Service'}], '_Kassenanteil': {'_KassenanteilSumme': None}, '_Rechnungsnummer': '97997', '_Rechnungsdatum': '2012-07-03', '_Rechnungsbetrag': 27.15, '_Waehrung': 'EUR'}",False,"ERROR: -g example_invoice(X), is_invoice_invalid(X).: false
","
is_invoice_invalid(Invoice) :-
    Invoice = invoice(Services, _, _, _),
    findall((Tooth, Date), member(service(2400, Date, _, _, _, _, _, [Tooth]), Services), ServiceList),
    find_duplicate_services(ServiceList, Duplicates),
    Duplicates \= [],
    print('Elektrometrische Längenbestimmung eines Wurzelkanals wurde mehr als zweimal in einer Sitzung berechnet.'),
    true.

find_duplicate_services(ServiceList, Duplicates) :-
    sort(ServiceList, Sorted),
    find_duplicates(Sorted, Duplicates).

find_duplicates([X, X | T], [X | D]) :- 
    find_duplicates([X | T], D), !.
find_duplicates([X, Y | T], D) :- 
    X \= Y, 
    find_duplicates([Y | T], D).
find_duplicates([], []).

example_invoice(invoice([
		service(2400, date(2012, 2, 12), 2.3, 70.0, 9.05, 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '', [tooth(1, 1)]),
		service(2400, date(2012, 2, 12), 2.3, 70.0, 9.05, 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '', [tooth(1, 1)]),
		service(2400, date(2012, 2, 12), 2.3, 70.0, 9.05, 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '', [tooth(1, 1)])
	],
	[
		
	],
	invoice_date(date(2012, 7, 3)),
	invoice_amount(27.15)
)).",False,Die Leistung nach der Nummer 2400 ist je Wurzelkanal höchstens zweimal je Sitzung berechnungsfähig.,True
34,2410,"{'_Positionen': [{'_Faktor': 2.3, '_Behandlungsdatum': '2012-02-12', '_Anzahl': 1, '_Betrag': 50.71, '_Leistungsbeschreibung': 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '_Nr': '2410', '_Zahn': [11], '_Typ': 'Service'}, {'_Faktor': 2.3, '_Behandlungsdatum': '2012-02-12', '_Anzahl': 1, '_Betrag': 50.71, '_Leistungsbeschreibung': 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '_Nr': '2410', '_Zahn': [12], '_Typ': 'Service'}, {'_Faktor': 2.3, '_Behandlungsdatum': '2012-02-12', '_Anzahl': 1, '_Betrag': 50.71, '_Leistungsbeschreibung': 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '_Nr': '2410', '_Zahn': [13], '_Typ': 'Service'}], '_Kassenanteil': {'_KassenanteilSumme': None}, '_Rechnungsnummer': '97997', '_Rechnungsdatum': '2012-07-03', '_Rechnungsbetrag': 152.13, '_Waehrung': 'EUR'}",False,"ERROR: -g example_invoice(X), is_invoice_invalid(X).: false
","
is_invoice_invalid(Invoice) :-
    Invoice = invoice(Services, _, _, _),
    findall(tooth(Area, Position), member(service(2410, _, _, _, _, _, _, [tooth(Area, Position)]), Services), RootCanals),
    find_duplicates(RootCanals, Duplicates),
    check_root_canal_recharges(Duplicates, Services).

find_duplicates(List, Duplicates) :-
    setof(X, (member(X, List), select(X, List, Rest), member(X, Rest)), Duplicates).

check_root_canal_recharges([], _).
check_root_canal_recharges([Tooth|Rest], Services) :-
    findall(Justification, member(service(2410, _, _, _, _, _, Justification, [Tooth]), Services), Justifications),
    length(Justifications, Count),
    (Count > 2 ->
        print('Root canal preparation service 2410 charged more than twice for the same canal'), false;
    Count == 2 ->
        (member('', Justifications) ->
            print('Root canal preparation service 2410 charged twice without proper justification'), false;
            true);
    true),
    check_root_canal_recharges(Rest, Services).


% The translation for Rule 2 is identical to Rule 1 and has already been provided above.


% The translation for Rule 3 is identical to Rule 1 and has already been provided above.

example_invoice(invoice([
		service(2410, date(2012, 2, 12), 2.3, 392.0, 50.71, 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '', [tooth(1, 1)]),
		service(2410, date(2012, 2, 12), 2.3, 392.0, 50.71, 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '', [tooth(1, 2)]),
		service(2410, date(2012, 2, 12), 2.3, 392.0, 50.71, 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '', [tooth(1, 3)])
	],
	[
		
	],
	invoice_date(date(2012, 7, 3)),
	invoice_amount(152.13)
)).",True,"Die Leistung nach der Nummer 2410 ist für denselben Wurzelkanal nur dann erneut berechnungsfähig, wenn der Wurzelkanal nach der ersten Aufbereitung definitiv versorgt worden ist.",True
35,2410,"{'_Positionen': [{'_Faktor': 2.3, '_Behandlungsdatum': '2012-02-12', '_Anzahl': 1, '_Betrag': 50.71, '_Leistungsbeschreibung': 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '_Nr': '2410', '_Zahn': [11], '_Typ': 'Service', '_Begründung': 'Wurzelkanal nach der ersten Aufbereitung definitiv versorgt worden'}, {'_Faktor': 2.3, '_Behandlungsdatum': '2012-02-12', '_Anzahl': 1, '_Betrag': 50.71, '_Leistungsbeschreibung': 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '_Nr': '2410', '_Zahn': [11], '_Typ': 'Service', '_Begründung': 'Wurzelkanal nach der ersten Aufbereitung definitiv versorgt worden'}, {'_Faktor': 2.3, '_Behandlungsdatum': '2012-02-12', '_Anzahl': 1, '_Betrag': 50.71, '_Leistungsbeschreibung': 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '_Nr': '2410', '_Zahn': [12], '_Typ': 'Service', '_Begründung': 'Wurzelkanal nach der ersten Aufbereitung definitiv versorgt worden'}], '_Kassenanteil': {'_KassenanteilSumme': None}, '_Rechnungsnummer': '97997', '_Rechnungsdatum': '2012-07-03', '_Rechnungsbetrag': 152.13, '_Waehrung': 'EUR'}",True,,"
is_invoice_invalid(Invoice) :-
    Invoice = invoice(Services, _, _, _),
    findall(tooth(Area, Position), member(service(2410, _, _, _, _, _, _, [tooth(Area, Position)]), Services), RootCanals),
    find_duplicates(RootCanals, Duplicates),
    check_root_canal_recharges(Duplicates, Services).

find_duplicates(List, Duplicates) :-
    setof(X, (member(X, List), select(X, List, Rest), member(X, Rest)), Duplicates).

check_root_canal_recharges([], _).
check_root_canal_recharges([Tooth|Rest], Services) :-
    findall(Justification, member(service(2410, _, _, _, _, _, Justification, [Tooth]), Services), Justifications),
    length(Justifications, Count),
    (Count > 2 ->
        print('Root canal preparation service 2410 charged more than twice for the same canal'), false;
    Count == 2 ->
        (member('', Justifications) ->
            print('Root canal preparation service 2410 charged twice without proper justification'), false;
            true);
    true),
    check_root_canal_recharges(Rest, Services).


% The translation for Rule 2 is identical to Rule 1 and has already been provided above.


% The translation for Rule 3 is identical to Rule 1 and has already been provided above.

example_invoice(invoice([
		service(2410, date(2012, 2, 12), 2.3, 392.0, 50.71, 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', 'Wurzelkanal nach der ersten Aufbereitung definitiv versorgt worden', [tooth(1, 1)]),
		service(2410, date(2012, 2, 12), 2.3, 392.0, 50.71, 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', 'Wurzelkanal nach der ersten Aufbereitung definitiv versorgt worden', [tooth(1, 1)]),
		service(2410, date(2012, 2, 12), 2.3, 392.0, 50.71, 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', 'Wurzelkanal nach der ersten Aufbereitung definitiv versorgt worden', [tooth(1, 2)])
	],
	[
		
	],
	invoice_date(date(2012, 7, 3)),
	invoice_amount(152.13)
)).",True,"Die Leistung nach der Nummer 2410 ist für denselben Wurzelkanal nur dann erneut berechnungsfähig, wenn der Wurzelkanal nach der ersten Aufbereitung definitiv versorgt worden ist.",False
36,2410,"{'_Positionen': [{'_Faktor': 2.3, '_Behandlungsdatum': '2012-02-12', '_Anzahl': 1, '_Betrag': 50.71, '_Leistungsbeschreibung': 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '_Nr': '2410', '_Zahn': [11], '_Typ': 'Service'}, {'_Faktor': 2.3, '_Behandlungsdatum': '2012-02-12', '_Anzahl': 1, '_Betrag': 50.71, '_Leistungsbeschreibung': 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '_Nr': '2410', '_Zahn': [11], '_Typ': 'Service'}, {'_Faktor': 2.3, '_Behandlungsdatum': '2012-02-12', '_Anzahl': 1, '_Betrag': 50.71, '_Leistungsbeschreibung': 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '_Nr': '2410', '_Zahn': [13], '_Typ': 'Service'}], '_Kassenanteil': {'_KassenanteilSumme': None}, '_Rechnungsnummer': '97997', '_Rechnungsdatum': '2012-07-03', '_Rechnungsbetrag': 152.13, '_Waehrung': 'EUR'}",False,"'Root canal preparation service 2410 charged twice without proper justification'
ERROR: -g example_invoice(X), is_invoice_invalid(X).: false
","
is_invoice_invalid(Invoice) :-
    Invoice = invoice(Services, _, _, _),
    findall(tooth(Area, Position), member(service(2410, _, _, _, _, _, _, [tooth(Area, Position)]), Services), RootCanals),
    find_duplicates(RootCanals, Duplicates),
    check_root_canal_recharges(Duplicates, Services).

find_duplicates(List, Duplicates) :-
    setof(X, (member(X, List), select(X, List, Rest), member(X, Rest)), Duplicates).

check_root_canal_recharges([], _).
check_root_canal_recharges([Tooth|Rest], Services) :-
    findall(Justification, member(service(2410, _, _, _, _, _, Justification, [Tooth]), Services), Justifications),
    length(Justifications, Count),
    (Count > 2 ->
        print('Root canal preparation service 2410 charged more than twice for the same canal'), false;
    Count == 2 ->
        (member('', Justifications) ->
            print('Root canal preparation service 2410 charged twice without proper justification'), false;
            true);
    true),
    check_root_canal_recharges(Rest, Services).


% The translation for Rule 2 is identical to Rule 1 and has already been provided above.


% The translation for Rule 3 is identical to Rule 1 and has already been provided above.

example_invoice(invoice([
		service(2410, date(2012, 2, 12), 2.3, 392.0, 50.71, 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '', [tooth(1, 1)]),
		service(2410, date(2012, 2, 12), 2.3, 392.0, 50.71, 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '', [tooth(1, 1)]),
		service(2410, date(2012, 2, 12), 2.3, 392.0, 50.71, 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '', [tooth(1, 3)])
	],
	[
		
	],
	invoice_date(date(2012, 7, 3)),
	invoice_amount(152.13)
)).",False,"Die Leistung nach der Nummer 2410 ist für denselben Wurzelkanal nur dann erneut berechnungsfähig, wenn der Wurzelkanal nach der ersten Aufbereitung definitiv versorgt worden ist.",True
37,2410,"{'_Positionen': [{'_Faktor': 2.3, '_Behandlungsdatum': '2012-02-12', '_Anzahl': 1, '_Betrag': 50.71, '_Leistungsbeschreibung': 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '_Nr': '2410', '_Zahn': [11], '_Typ': 'Service', '_Begründung': 'Wurzelkanal nach der ersten Aufbereitung definitiv versorgt worden'}, {'_Faktor': 2.3, '_Behandlungsdatum': '2012-02-12', '_Anzahl': 1, '_Betrag': 50.71, '_Leistungsbeschreibung': 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '_Nr': '2410', '_Zahn': [11], '_Typ': 'Service', '_Begründung': 'Wurzelkanal nach der ersten Aufbereitung definitiv versorgt worden'}, {'_Faktor': 2.3, '_Behandlungsdatum': '2012-02-12', '_Anzahl': 1, '_Betrag': 50.71, '_Leistungsbeschreibung': 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', '_Nr': '2410', '_Zahn': [11], '_Typ': 'Service', '_Begründung': 'Wurzelkanal nach der ersten Aufbereitung definitiv versorgt worden'}], '_Kassenanteil': {'_KassenanteilSumme': None}, '_Rechnungsnummer': '97997', '_Rechnungsdatum': '2012-07-03', '_Rechnungsbetrag': 152.13, '_Waehrung': 'EUR'}",False,"'Root canal preparation service 2410 charged more than twice for the same canal'
ERROR: -g example_invoice(X), is_invoice_invalid(X).: false
","
is_invoice_invalid(Invoice) :-
    Invoice = invoice(Services, _, _, _),
    findall(tooth(Area, Position), member(service(2410, _, _, _, _, _, _, [tooth(Area, Position)]), Services), RootCanals),
    find_duplicates(RootCanals, Duplicates),
    check_root_canal_recharges(Duplicates, Services).

find_duplicates(List, Duplicates) :-
    setof(X, (member(X, List), select(X, List, Rest), member(X, Rest)), Duplicates).

check_root_canal_recharges([], _).
check_root_canal_recharges([Tooth|Rest], Services) :-
    findall(Justification, member(service(2410, _, _, _, _, _, Justification, [Tooth]), Services), Justifications),
    length(Justifications, Count),
    (Count > 2 ->
        print('Root canal preparation service 2410 charged more than twice for the same canal'), false;
    Count == 2 ->
        (member('', Justifications) ->
            print('Root canal preparation service 2410 charged twice without proper justification'), false;
            true);
    true),
    check_root_canal_recharges(Rest, Services).


% The translation for Rule 2 is identical to Rule 1 and has already been provided above.


% The translation for Rule 3 is identical to Rule 1 and has already been provided above.

example_invoice(invoice([
		service(2410, date(2012, 2, 12), 2.3, 392.0, 50.71, 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', 'Wurzelkanal nach der ersten Aufbereitung definitiv versorgt worden', [tooth(1, 1)]),
		service(2410, date(2012, 2, 12), 2.3, 392.0, 50.71, 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', 'Wurzelkanal nach der ersten Aufbereitung definitiv versorgt worden', [tooth(1, 1)]),
		service(2410, date(2012, 2, 12), 2.3, 392.0, 50.71, 'Eingehende Untersuchung zur Feststellung von Zahn-, Mund- und Kiefererkrankungen', 'Wurzelkanal nach der ersten Aufbereitung definitiv versorgt worden', [tooth(1, 1)])
	],
	[
		
	],
	invoice_date(date(2012, 7, 3)),
	invoice_amount(152.13)
)).",False,"Die Leistung nach der Nummer 2410 ist für denselben Wurzelkanal nur dann erneut berechnungsfähig, wenn der Wurzelkanal nach der ersten Aufbereitung definitiv versorgt worden ist.",True
38,L_Zuschläge_zu_bestimmten,"{'_Positionen': [{'_Behandlungsdatum': '2012-02-12', '_Faktor': 1.0, '_Anzahl': 1, '_Betrag': 22.5, '_Leistungsbeschreibung': 'Zuschlag', '_Nr': '0500', '_Typ': 'Service'}], '_Kassenanteil': {'_KassenanteilSumme': None}, '_Rechnungsnummer': '97997', '_Rechnungsdatum': '2012-07-03', '_Rechnungsbetrag': 22.5, '_Waehrung': 'EUR'}",'Invalid invoice: Surcharges with numbers 0500 to 0530 should have a multiplier of 1.','Invalid invoice: Surcharges with numbers 0500 to 0530 should have a multiplier of 1.',"
is_invoice_invalid(Invoice) :-
    Invoice = invoice(Services, _, _, _),
    member(service(Service, _, Multiplier, _, _, _, _, _), Services),
    between(500, 530, Service),
    Multiplier \= 1,
    print('Invalid invoice: Surcharges with numbers 0500 to 0530 should have a multiplier of 1.'),
    true.








is_invoice_invalid(Invoice) :-
    Invoice = invoice(Services, _, _, _),
    member(service(Service1, Date1, _, _, _, _, _, _), Services),
    (between(110, 120, Service1); between(500, 530, Service1)),
    member(service(Service2, Date2, _, _, _, _, _, _), Services),
    between(440, 445, Service2),
    Date1 = Date2,
    print('Invalid invoice: Surcharges with numbers 0110, 0120, and 0500 to 0530 cannot be calculated in addition to the corresponding surcharges with the numbers 440 to 445 for the same session.'),
    true.

example_invoice(invoice([
		service(0500, date(2012, 2, 12), 1.0, 400.0, 22.5, 'Zuschlag', '', [])
	],
	[
		
	],
	invoice_date(date(2012, 7, 3)),
	invoice_amount(22.5)
)).",True,Die Zuschläge nach den Nummern 0500 bis 0530 sind nur mit dem einfachen Gebührensatz berechnungsfähig.,False
39,L_Zuschläge_zu_bestimmten,"{'_Positionen': [{'_Behandlungsdatum': '2012-02-12', '_Faktor': 1.0, '_Anzahl': 1, '_Betrag': 123.73, '_Leistungsbeschreibung': 'Zuschlag', '_Nr': '0530', '_Typ': 'Service'}], '_Kassenanteil': {'_KassenanteilSumme': None}, '_Rechnungsnummer': '97997', '_Rechnungsdatum': '2012-07-03', '_Rechnungsbetrag': 123.73, '_Waehrung': 'EUR'}",'Invalid invoice: Surcharges with numbers 0500 to 0530 should have a multiplier of 1.','Invalid invoice: Surcharges with numbers 0500 to 0530 should have a multiplier of 1.',"
is_invoice_invalid(Invoice) :-
    Invoice = invoice(Services, _, _, _),
    member(service(Service, _, Multiplier, _, _, _, _, _), Services),
    between(500, 530, Service),
    Multiplier \= 1,
    print('Invalid invoice: Surcharges with numbers 0500 to 0530 should have a multiplier of 1.'),
    true.








is_invoice_invalid(Invoice) :-
    Invoice = invoice(Services, _, _, _),
    member(service(Service1, Date1, _, _, _, _, _, _), Services),
    (between(110, 120, Service1); between(500, 530, Service1)),
    member(service(Service2, Date2, _, _, _, _, _, _), Services),
    between(440, 445, Service2),
    Date1 = Date2,
    print('Invalid invoice: Surcharges with numbers 0110, 0120, and 0500 to 0530 cannot be calculated in addition to the corresponding surcharges with the numbers 440 to 445 for the same session.'),
    true.

example_invoice(invoice([
		service(0530, date(2012, 2, 12), 1.0, 2200.0, 123.73, 'Zuschlag', '', [])
	],
	[
		
	],
	invoice_date(date(2012, 7, 3)),
	invoice_amount(123.73)
)).",True,Die Zuschläge nach den Nummern 0500 bis 0530 sind nur mit dem einfachen Gebührensatz berechnungsfähig.,False
40,L_Zuschläge_zu_bestimmten,"{'_Positionen': [{'_Behandlungsdatum': '2012-02-12', '_Faktor': 2, '_Anzahl': 1, '_Betrag': 45, '_Leistungsbeschreibung': 'Zuschlag', '_Nr': '0500', '_Typ': 'Service'}], '_Kassenanteil': {'_KassenanteilSumme': None}, '_Rechnungsnummer': '97997', '_Rechnungsdatum': '2012-07-03', '_Rechnungsbetrag': 45, '_Waehrung': 'EUR'}",'Invalid invoice: Surcharges with numbers 0500 to 0530 should have a multiplier of 1.','Invalid invoice: Surcharges with numbers 0500 to 0530 should have a multiplier of 1.',"
is_invoice_invalid(Invoice) :-
    Invoice = invoice(Services, _, _, _),
    member(service(Service, _, Multiplier, _, _, _, _, _), Services),
    between(500, 530, Service),
    Multiplier \= 1,
    print('Invalid invoice: Surcharges with numbers 0500 to 0530 should have a multiplier of 1.'),
    true.








is_invoice_invalid(Invoice) :-
    Invoice = invoice(Services, _, _, _),
    member(service(Service1, Date1, _, _, _, _, _, _), Services),
    (between(110, 120, Service1); between(500, 530, Service1)),
    member(service(Service2, Date2, _, _, _, _, _, _), Services),
    between(440, 445, Service2),
    Date1 = Date2,
    print('Invalid invoice: Surcharges with numbers 0110, 0120, and 0500 to 0530 cannot be calculated in addition to the corresponding surcharges with the numbers 440 to 445 for the same session.'),
    true.

example_invoice(invoice([
		service(0500, date(2012, 2, 12), 2, 400.0, 45, 'Zuschlag', '', [])
	],
	[
		
	],
	invoice_date(date(2012, 7, 3)),
	invoice_amount(45)
)).",False,Die Zuschläge nach den Nummern 0500 bis 0530 sind nur mit dem einfachen Gebührensatz berechnungsfähig.,False
41,L_Zuschläge_zu_bestimmten,"{'_Positionen': [{'_Behandlungsdatum': '2012-02-12', '_Faktor': 2, '_Anzahl': 1, '_Betrag': 247.46, '_Leistungsbeschreibung': 'Zuschlag', '_Nr': '0530', '_Typ': 'Service'}], '_Kassenanteil': {'_KassenanteilSumme': None}, '_Rechnungsnummer': '97997', '_Rechnungsdatum': '2012-07-03', '_Rechnungsbetrag': 247.46, '_Waehrung': 'EUR'}",'Invalid invoice: Surcharges with numbers 0500 to 0530 should have a multiplier of 1.','Invalid invoice: Surcharges with numbers 0500 to 0530 should have a multiplier of 1.',"
is_invoice_invalid(Invoice) :-
    Invoice = invoice(Services, _, _, _),
    member(service(Service, _, Multiplier, _, _, _, _, _), Services),
    between(500, 530, Service),
    Multiplier \= 1,
    print('Invalid invoice: Surcharges with numbers 0500 to 0530 should have a multiplier of 1.'),
    true.








is_invoice_invalid(Invoice) :-
    Invoice = invoice(Services, _, _, _),
    member(service(Service1, Date1, _, _, _, _, _, _), Services),
    (between(110, 120, Service1); between(500, 530, Service1)),
    member(service(Service2, Date2, _, _, _, _, _, _), Services),
    between(440, 445, Service2),
    Date1 = Date2,
    print('Invalid invoice: Surcharges with numbers 0110, 0120, and 0500 to 0530 cannot be calculated in addition to the corresponding surcharges with the numbers 440 to 445 for the same session.'),
    true.

example_invoice(invoice([
		service(0530, date(2012, 2, 12), 2, 2200.0, 247.46, 'Zuschlag', '', [])
	],
	[
		
	],
	invoice_date(date(2012, 7, 3)),
	invoice_amount(247.46)
)).",False,Die Zuschläge nach den Nummern 0500 bis 0530 sind nur mit dem einfachen Gebührensatz berechnungsfähig.,False
42,§ 10,"{'_Positionen': [{'_Behandlungsdatum': '', '_Faktor': 2.3, '_Anzahl': 1, '_Betrag': 31.05, '_Leistungsbeschreibung': 'Provisorische Brücke im direkten Verfahren mit Abformung, je Zahn oder Implantat, einschließlich Entfernung', '_Nr': '5120', '_Zahn': [15], '_Typ': 'Service'}], '_Kassenanteil': {'_KassenanteilSumme': None}, '_Rechnungsnummer': '97997', '_Rechnungsdatum': '2012-07-03', '_Rechnungsbetrag': 31.05, '_Waehrung': 'EUR'}",'Invalid invoice: Missing date of service.',"Warning: c:/users/jonas/ideaprojects/idp/legal rule extraction goz/goz/src/temp.pl:10:
Warning:    Singleton variables: [Teeth]
'Invalid invoice: Missing date of service.'","
is_invoice_invalid(Invoice) :-
    Invoice = invoice(Services, _, _, _),
    member(service(_, date(Year, Month, Day), _, _, _, _, _, _), Services),
    (Year = ''; Month = ''; Day = ''),
    print('Invalid invoice: Missing date of service.'),
    true.


is_invoice_invalid(Invoice) :-
    Invoice = invoice(Services, _, _, _),
    member(service(Service, _, Multiplier, _, Charge, Description, _, Teeth), Services),
    (Service = ''; Multiplier = ''; Charge = ''; Description = ''),
    print('Invalid invoice: Missing service details.'),
    true.








is_invoice_invalid(Invoice) :-
    Invoice = invoice(_, Material_Costs, _, _),
    member(material_cost(_, _, _, Count, Charge, Description, _, _), Material_Costs),
    (Count = '', Charge = '', Description = ''),
    print('Invalid invoice: Missing material cost details.'),
    true.


is_invoice_invalid(Invoice) :-
    Invoice = invoice(Services, _, _, _),
    member(service(_, _, Multiplier, _, _, _, Justification, _), Services),
    Multiplier > 2.3,
    Justification = '',
    print('Invalid invoice: Missing justification for high fee.'),
    true.













example_invoice(invoice([
		service(5120, date('', '', ''), 2.3, 240.0, 31.05, 'Provisorische Brücke im direkten Verfahren mit Abformung, je Zahn oder Implantat, einschließlich Entfernung', '', [tooth(1, 5)])
	],
	[
		
	],
	invoice_date(date(2012, 7, 3)),
	invoice_amount(31.05)
)).",False,Service has not date,False
43,§ 10,"{'_Positionen': [{'_Behandlungsdatum': '2012-02-12', '_Faktor': 2.3, '_Anzahl': 1, '_Betrag': 31.05, '_Leistungsbeschreibung': '', '_Nr': '5120', '_Zahn': [15], '_Typ': 'Service'}], '_Kassenanteil': {'_KassenanteilSumme': None}, '_Rechnungsnummer': '97997', '_Rechnungsdatum': '2012-07-03', '_Rechnungsbetrag': 31.05, '_Waehrung': 'EUR'}",'Invalid invoice: Missing service details.',"Warning: c:/users/jonas/ideaprojects/idp/legal rule extraction goz/goz/src/temp.pl:10:
Warning:    Singleton variables: [Teeth]
'Invalid invoice: Missing service details.'","
is_invoice_invalid(Invoice) :-
    Invoice = invoice(Services, _, _, _),
    member(service(_, date(Year, Month, Day), _, _, _, _, _, _), Services),
    (Year = ''; Month = ''; Day = ''),
    print('Invalid invoice: Missing date of service.'),
    true.


is_invoice_invalid(Invoice) :-
    Invoice = invoice(Services, _, _, _),
    member(service(Service, _, Multiplier, _, Charge, Description, _, Teeth), Services),
    (Service = ''; Multiplier = ''; Charge = ''; Description = ''),
    print('Invalid invoice: Missing service details.'),
    true.








is_invoice_invalid(Invoice) :-
    Invoice = invoice(_, Material_Costs, _, _),
    member(material_cost(_, _, _, Count, Charge, Description, _, _), Material_Costs),
    (Count = '', Charge = '', Description = ''),
    print('Invalid invoice: Missing material cost details.'),
    true.


is_invoice_invalid(Invoice) :-
    Invoice = invoice(Services, _, _, _),
    member(service(_, _, Multiplier, _, _, _, Justification, _), Services),
    Multiplier > 2.3,
    Justification = '',
    print('Invalid invoice: Missing justification for high fee.'),
    true.













example_invoice(invoice([
		service(5120, date(2012, 2, 12), 2.3, 240.0, 31.05, '', '', [tooth(1, 5)])
	],
	[
		
	],
	invoice_date(date(2012, 7, 3)),
	invoice_amount(31.05)
)).",False,Service has not description,False
44,§ 5,"{'_Positionen': [{'_Behandlungsdatum': '2012-02-12', '_Faktor': 3.5, '_Anzahl': 1, '_Betrag': 47.24, '_Leistungsbeschreibung': 'Provisorische Brücke im direkten Verfahren mit Abformung, je Zahn oder Implantat, einschließlich Entfernung', '_Nr': '5120', '_Zahn': [15], '_Typ': 'Service'}], '_Kassenanteil': {'_KassenanteilSumme': None}, '_Rechnungsnummer': '97997', '_Rechnungsdatum': '2012-07-03', '_Rechnungsbetrag': 47.24, '_Waehrung': 'EUR'}",'Invalid invoice: The multiplier for a service exceeds 2.3 without justification.',"Warning: c:/users/jonas/ideaprojects/idp/legal rule extraction goz/goz/src/temp.pl:21:
Warning:    Clauses of is_invoice_invalid/1 are not together in the source-file
Warning:    Earlier definition at c:/users/jonas/ideaprojects/idp/legal rule extraction goz/goz/src/temp.pl:7
Warning:    Current predicate: is_multiplier_valid/2
Warning:    Use :- discontiguous is_invoice_invalid/1. to suppress this message
'Invalid invoice: The multiplier for a service exceeds 2.3 without justification.'","
calculate_charge(PointScore, Multiplier, Charge) :-
    PointValue = 0.0562421,
    CalculatedCharge is round(PointValue * Multiplier * PointScore * 100) / 100,
    Charge = CalculatedCharge.

is_invoice_invalid(Invoice) :-
    Invoice = invoice(Services, _, _, _),
    member(service(_, _, Multiplier, PointScore, Charge, _, _, _), Services),
    \+ calculate_charge(PointScore, Multiplier, Charge),
    print('Invalid invoice: The charge for a service does not match the calculated charge.'),
    true.




is_multiplier_valid(Multiplier, Justification) :-
    Multiplier =< 2.3;
    (Multiplier > 2.3, Justification \= '').

is_invoice_invalid(Invoice) :-
    Invoice = invoice(Services, _, _, _),
    member(service(_, _, Multiplier, _, _, _, Justification, _), Services),
    \+ is_multiplier_valid(Multiplier, Justification),
    print('Invalid invoice: The multiplier for a service exceeds 2.3 without justification.'),
    true.

example_invoice(invoice([
		service(5120, date(2012, 2, 12), 3.5, 240.0, 47.24, 'Provisorische Brücke im direkten Verfahren mit Abformung, je Zahn oder Implantat, einschließlich Entfernung', '', [tooth(1, 5)])
	],
	[
		
	],
	invoice_date(date(2012, 7, 3)),
	invoice_amount(47.24)
)).",False,Multiplier > 2.3 without Justification,False
